{"version":3,"sources":["../src/MongooseLoader.ts"],"names":["indexResults","results","indexField","cacheKey","cacheKeyFn","indexedResults","Map","forEach","res","set","normalizeResults","keys","map","val","get","Error","key","toString","mongooseLoader","model","lean","keyField","find","$in"],"mappings":";;;;;;;;;;;;AAAA;;;AAIA,SAASA,YAAT,CAAsBC,OAAtB,EAAsCC,UAAtC,EAA0DC,QAAQ,GAAGC,UAArE,EAAiF;AAC/E,QAAMC,cAAc,GAAG,IAAIC,GAAJ,EAAvB;AACAL,EAAAA,OAAO,CAACM,OAAR,CAAgBC,GAAG,IAAI;AACrBH,IAAAA,cAAc,CAACI,GAAf,CAAmBN,QAAQ,CAACK,GAAG,CAACN,UAAD,CAAJ,CAA3B,EAA8CM,GAA9C;AACD,GAFD;AAGA,SAAOH,cAAP;AACD;;AAED,SAASK,gBAAT,CAA0BC,IAA1B,EAAwDT,UAAxD,EAA4EC,QAAQ,GAAGC,UAAvF,EAAmG;AACjG,SAAQH,OAAD,IAAoB;AACzB,UAAMI,cAAc,GAAGL,YAAY,CAACC,OAAD,EAAUC,UAAV,EAAsBC,QAAtB,CAAnC;AACA,WAAOQ,IAAI,CAACC,GAAL,CACLC,GAAG,IAAIR,cAAc,CAACS,GAAf,CAAmBX,QAAQ,CAACU,GAAD,CAA3B,KAAqC,IAAIE,KAAJ,CAAW,mBAAkBF,GAAI,EAAjC,CADvC,CAAP;AAGD,GALD;AAMD;;AAEM,MAAMT,UAAU,GAAIY,GAAD,IAA0BA,GAAG,CAACC,QAAJ,EAA7C;;;;SAOuBC,c;;;;;sCAAf,WACbC,KADa,EAEbR,IAFa,EAGbS,IAAa,GAAG,IAHH,EAIbC,QAAgB,GAAG,KAJN,EAKb;AACA,UAAMpB,OAAO,GAAGmB,IAAI,SAASD,KAAK,CAACG,IAAN,CAAW;AAAE,OAACD,QAAD,GAAY;AAAEE,QAAAA,GAAG,EAAEZ;AAAP;AAAd,KAAX,EAA0CS,IAA1C,EAAT,SAAkED,KAAK,CAACG,IAAN,CAAW;AAAE,OAACD,QAAD,GAAY;AAAEE,QAAAA,GAAG,EAAEZ;AAAP;AAAd,KAAX,CAAtF;AAEA,WAAOD,gBAAgB,CAACC,IAAD,EAAOU,QAAP,EAAiBjB,UAAjB,CAAhB,CAA6CH,OAA7C,CAAP;AACD,G","sourcesContent":["/**\n * Helper to batch queries on mongoose\n */\n\nfunction indexResults(results: any[], indexField: string, cacheKey = cacheKeyFn) {\n  const indexedResults = new Map();\n  results.forEach(res => {\n    indexedResults.set(cacheKey(res[indexField]), res);\n  });\n  return indexedResults;\n}\n\nfunction normalizeResults(keys : ReadonlyArray<string>, indexField: string, cacheKey = cacheKeyFn) {\n  return (results: any[]) => {\n    const indexedResults = indexResults(results, indexField, cacheKey);\n    return keys.map(\n      val => indexedResults.get(cacheKey(val)) || new Error(`Key not found : ${val}`),\n    );\n  };\n}\n\nexport const cacheKeyFn = (key: string) : string => key.toString();\n\ntype MongooseProjection = object | string;\ntype Mongoose$Document = {\n  find(criteria?: object, projection?: MongooseProjection, options?: object): any,\n};\n\nexport default async function mongooseLoader(\n  model: Mongoose$Document,\n  keys: ReadonlyArray<string>,\n  lean: boolean = true,\n  keyField: string = '_id'\n) {\n  const results = lean ? await model.find({ [keyField]: { $in: keys } }).lean() : await model.find({ [keyField]: { $in: keys } });\n\n  return normalizeResults(keys, keyField, cacheKeyFn)(results);\n}\n"],"file":"MongooseLoader.js"}