"use strict";

require("core-js/modules/es6.object.define-property");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = uploadMiddleware;

require("core-js/modules/es6.promise");

require("core-js/modules/es6.object.to-string");

require("core-js/modules/es6.function.name");

require("core-js/modules/es6.array.for-each");

require("regenerator-runtime/runtime");

var _extractFiles2 = require("extract-files");

var _RelayRequestBatch = _interopRequireDefault(require("../RelayRequestBatch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function uploadMiddleware() {
  return function (next) {
    return (
      /*#__PURE__*/
      function () {
        var _ref = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee(req) {
          var operations, _extractFiles, extractedOperations, files, formData, pathMap, i, res;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(req instanceof _RelayRequestBatch["default"])) {
                    _context.next = 2;
                    break;
                  }

                  throw new Error('RelayRequestBatch is not supported');

                case 2:
                  operations = {
                    query: req.operation.text,
                    variables: req.variables
                  };
                  _extractFiles = (0, _extractFiles2.extractFiles)(operations), extractedOperations = _extractFiles.clone, files = _extractFiles.files;

                  if (files.size) {
                    formData = new FormData();
                    formData.append('operations', JSON.stringify(extractedOperations));
                    pathMap = {};
                    i = 0;
                    files.forEach(function (paths) {
                      pathMap[++i] = paths;
                    });
                    formData.append('map', JSON.stringify(pathMap));
                    i = 0;
                    files.forEach(function (paths, file) {
                      formData.append(++i, file, file.name);
                    });
                    req.fetchOpts.method = 'POST';
                    req.fetchOpts.body = formData;
                  }

                  _context.next = 7;
                  return next(req);

                case 7:
                  res = _context.sent;
                  return _context.abrupt("return", res);

                case 9:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }()
    );
  };
}