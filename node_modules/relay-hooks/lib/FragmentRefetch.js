"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var relay_runtime_1 = require("relay-runtime");
var ReactRelayQueryFetcher = require("react-relay/lib/ReactRelayQueryFetcher");
var Utils_1 = require("./Utils");
var FragmentRefetch = /** @class */ (function () {
    function FragmentRefetch() {
        this._queryFetcher = new ReactRelayQueryFetcher();
    }
    FragmentRefetch.prototype.dispose = function () {
        this._queryFetcher && this._queryFetcher.dispose();
        this._refetchSubscription && this._refetchSubscription.unsubscribe();
    };
    FragmentRefetch.prototype.lookupInStore = function (environment, operation, fetchPolicy) {
        if (Utils_1.isStorePolicy(fetchPolicy) && environment.check(operation.root)) {
            this._queryFetcher._retainCachedOperation(environment, operation);
            return environment.lookup(operation.fragment, operation);
        }
        return null;
    };
    FragmentRefetch.prototype.refetch = function (environment, fragmentVariables, taggedNode, refetchVariables, renderVariables, observerOrCallback, options, prevResult, setResult) {
        var _this = this;
        var fetchVariables = typeof refetchVariables === 'function'
            ? refetchVariables(fragmentVariables)
            : refetchVariables;
        var newFragmentVariables = renderVariables
            ? __assign({}, fetchVariables, renderVariables) : fetchVariables;
        var cacheConfig = options ? { force: !!options.force } : undefined;
        if (cacheConfig != null && options && options.metadata != null) {
            cacheConfig.metadata = options.metadata;
        }
        var observer = typeof observerOrCallback === 'function'
            ? {
                // callback is not exectued on complete or unsubscribe
                // for backward compatibility
                next: observerOrCallback,
                error: observerOrCallback,
            }
            : observerOrCallback || {};
        var query = relay_runtime_1.getRequest(taggedNode);
        var operation = relay_runtime_1.createOperationDescriptor(query, fetchVariables);
        // TODO: T26288752 find a better way
        /* eslint-disable lint/react-state-props-mutation */
        //this.state.localVariables = fetchVariables;
        /* eslint-enable lint/react-state-props-mutation */
        // Cancel any previously running refetch.
        this._refetchSubscription && this._refetchSubscription.unsubscribe();
        // Declare refetchSubscription before assigning it in .start(), since
        // synchronous completion may call callbacks .subscribe() returns.
        var refetchSubscription;
        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? "network-only" : _a;
        var storeSnapshot = this.lookupInStore(environment, operation, fetchPolicy);
        if (storeSnapshot != null) {
            var res = prevResult.resolver;
            res.setVariables(newFragmentVariables, operation.node || operation.request.node);
            setResult({
                resolver: res, data: res.resolve(), relay: {
                    environment: environment,
                    variables: newFragmentVariables,
                }
            });
            var complete = function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    observer.next && observer.next();
                    observer.complete && observer.complete();
                    return [2 /*return*/];
                });
            }); };
            complete();
        }
        var isNetworky = Utils_1.isNetworkPolicy(fetchPolicy, storeSnapshot);
        if (!isNetworky) {
            return {
                dispose: function () { },
            };
        }
        if (isNetworky) {
            this._queryFetcher
                .execute({
                environment: environment,
                operation: operation,
                cacheConfig: cacheConfig,
                // TODO (T26430099): Cleanup old references
                preservePreviousReferences: true,
            })
                .mergeMap(function (response) {
                var res = prevResult.resolver;
                res.setVariables(newFragmentVariables, operation.node || operation.request.node);
                return relay_runtime_1.Observable.create(function (sink) {
                    setResult({
                        resolver: res, data: res.resolve(), relay: {
                            environment: environment,
                            variables: newFragmentVariables,
                        }
                    });
                    var complete = function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            sink.next();
                            sink.complete();
                            return [2 /*return*/];
                        });
                    }); };
                    complete();
                });
            })
                .finally(function () {
                // Finalizing a refetch should only clear this._refetchSubscription
                // if the finizing subscription is the most recent call.
                if (_this._refetchSubscription === refetchSubscription) {
                    _this._refetchSubscription = null;
                }
            })
                .subscribe(__assign({}, observer, { start: function (subscription) {
                    _this._refetchSubscription = refetchSubscription = subscription;
                    observer.start && observer.start(subscription);
                } }));
            return {
                dispose: function () {
                    refetchSubscription && refetchSubscription.unsubscribe();
                },
            };
        }
    };
    return FragmentRefetch;
}());
exports.default = FragmentRefetch;
