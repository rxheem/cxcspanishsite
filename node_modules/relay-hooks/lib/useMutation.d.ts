import * as React from 'react';
import { MutationConfig as BaseMutationConfig, Environment, OperationBase } from 'relay-runtime';
export declare type MutationState<T extends OperationBase> = {
    loading: boolean;
    data: T['response'] | null;
    error?: Error | null;
};
export declare type MutationNode<T extends OperationBase> = BaseMutationConfig<T>['mutation'];
export declare type MutationConfig<T extends OperationBase> = Partial<Omit<BaseMutationConfig<T>, 'mutation' | 'onCompleted'>> & {
    onCompleted?(response: T['response']): void;
};
export declare type Mutate<T extends OperationBase> = (config?: Partial<MutationConfig<T>>) => Promise<T['response']>;
export declare function useMutation<T extends OperationBase>(mutation: MutationNode<T>, userConfig?: MutationConfig<T>, 
/** if not provided, the context environment will be used. */
environment?: Environment): [Mutate<T>, MutationState<T>];
export declare type MutationProps<T extends OperationBase> = MutationConfig<T> & {
    children: (mutate: Mutate<T>, state: MutationState<T>) => React.ReactNode;
    mutation: MutationNode<T>;
    /** if not provided, the context environment will be used. */
    environment?: Environment;
};
export declare function Mutation<T extends OperationBase>({ children, mutation, environment, ...config }: MutationProps<T>): React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)>) | (new (props: any) => React.Component<any, any, any>)>;
