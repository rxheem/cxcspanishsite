"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var usePrevious_1 = require("./usePrevious");
var react_relay_1 = require("react-relay");
var areEqual = require("fbjs/lib/areEqual");
var UseQueryFetcher_1 = require("./UseQueryFetcher");
var Utils_1 = require("./Utils");
function useDeepCompare(value) {
    var latestValue = react_1.useRef(value);
    if (!areEqual(latestValue.current, value)) {
        latestValue.current = value;
    }
    return latestValue.current;
}
var defaultPolicy = 'store-or-network';
exports.useQueryModern = function (props) {
    var query = props.query, variables = props.variables, dataFrom = props.dataFrom, cacheConfig = props.cacheConfig;
    return exports.useQueryExp(query, variables, {
        fetchPolicy: Utils_1.convertDataFrom(dataFrom),
        networkCacheConfig: cacheConfig
    });
};
exports.useQueryExp = function (query, variables, options) {
    if (options === void 0) { options = {}; }
    var environment = react_1.useContext(react_relay_1.ReactRelayContext).environment;
    var _a = react_1.useState(null), forceUpdate = _a[1];
    var _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? defaultPolicy : _b, networkCacheConfig = options.networkCacheConfig;
    var latestVariables = useDeepCompare(variables);
    var prev = usePrevious_1.default({ environment: environment, query: query, latestVariables: latestVariables });
    var ref = react_1.useRef();
    if (ref.current === null || ref.current === undefined) {
        ref.current = {
            queryFetcher: new UseQueryFetcher_1.default(forceUpdate),
        };
    }
    var queryFetcher = ref.current.queryFetcher;
    react_1.useEffect(function () {
        return function () {
            queryFetcher.dispose();
        };
    }, []);
    if (!prev || prev.query !== query ||
        prev.environment !== environment ||
        prev.latestVariables !== latestVariables) {
        queryFetcher.execute(environment, query, variables, fetchPolicy, networkCacheConfig);
    }
    return queryFetcher.getLastResult();
};
exports.default = exports.useQueryModern;
