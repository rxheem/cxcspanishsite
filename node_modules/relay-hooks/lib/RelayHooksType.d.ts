import { GraphQLTaggedNode, RelayContext, FragmentSpecResolver } from 'relay-runtime/lib/RelayStoreTypes';
import { OperationType, CacheConfig } from 'relay-runtime';
export declare const NETWORK_ONLY = "NETWORK_ONLY";
export declare const STORE_THEN_NETWORK = "STORE_THEN_NETWORK";
export declare const STORE_OR_NETWORK = "STORE_OR_NETWORK";
export declare const STORE_ONLY = "STORE_ONLY";
interface DataFromEnum {
    NETWORK_ONLY: any;
    STORE_THEN_NETWORK: any;
    STORE_OR_NETWORK: any;
    STORE_ONLY: any;
}
export declare type FetchPolicy = 'store-only' | 'store-or-network' | 'store-and-network' | 'network-only';
export declare type DataFrom = keyof DataFromEnum;
export declare type ContainerResult = {
    data: {
        [key: string]: any;
    };
    resolver: FragmentSpecResolver;
};
export interface RenderProps<T extends OperationType> {
    error: Error;
    props: T['response'];
    retry: () => void;
    cached?: boolean;
}
export interface UseQueryProps<T extends OperationType> {
    cacheConfig?: CacheConfig;
    dataFrom?: DataFrom;
    query: GraphQLTaggedNode;
    variables: T['variables'];
}
export declare type OperationContextProps = {
    operation: any;
    relay: RelayContext;
};
export declare type RefetchOptions = {
    force?: boolean;
    fetchPolicy?: FetchPolicy;
    metadata?: {
        [key: string]: any;
    };
};
export {};
