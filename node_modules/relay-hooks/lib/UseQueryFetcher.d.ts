import * as ReactRelayQueryFetcher from 'react-relay/lib/ReactRelayQueryFetcher';
import { Snapshot } from 'relay-runtime/lib/RelayStoreTypes';
import { RenderProps, FetchPolicy } from './RelayHooksType';
import { OperationType, CacheConfig, IEnvironment } from 'relay-runtime';
declare class UseQueryFetcher<TOperationType extends OperationType> {
    _queryFetcher: ReactRelayQueryFetcher;
    _forceUpdate: any;
    _lastResult: RenderProps<TOperationType>;
    constructor(forceUpdate: any);
    getLastResult(): RenderProps<TOperationType>;
    dispose(): void;
    lookupInStore(environment: any, operation: any, fetchPolicy: any): Snapshot;
    execute(environment: IEnvironment, query: any, variables: any, fetchPolicy: any, cacheConfig: any): void;
    _execute(environment: IEnvironment, query: any, variables: any, fetchPolicy: any, cacheConfig: any): RenderProps<TOperationType>;
    getResult(environment: IEnvironment, query: any, variables: any, fetchPolicy: FetchPolicy, cacheConfig: CacheConfig, result: {
        empty?: boolean;
        error?: Error;
        snapshot?: Snapshot;
        cached?: boolean;
    }): RenderProps<TOperationType>;
}
export default UseQueryFetcher;
