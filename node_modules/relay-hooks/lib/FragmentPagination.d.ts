import { Subscription, IEnvironment, GraphQLTaggedNode, Observer, Variables, PageInfo } from 'relay-runtime';
export declare type ObserverOrCallback = Observer<void> | ((error: Error) => any);
import * as ReactRelayQueryFetcher from 'react-relay/lib/ReactRelayQueryFetcher';
import { ContainerResult, RefetchOptions } from './RelayHooksType';
declare type FragmentVariablesGetter = (prevVars: Variables, totalCount: number) => Variables;
export declare type ConnectionConfig = {
    direction?: 'backward' | 'forward';
    getConnectionFromProps?: (props: Object) => ConnectionData;
    getFragmentVariables?: FragmentVariablesGetter;
    getVariables: (props: Object, paginationInfo: {
        count: number;
        cursor: string;
    }, fragmentVariables: Variables) => Variables;
    query: GraphQLTaggedNode;
};
export declare type ConnectionData = {
    edges?: ReadonlyArray<any>;
    pageInfo?: PageInfo;
};
declare class FragmentPagination {
    _refetchSubscription: Subscription;
    _queryFetcher: ReactRelayQueryFetcher;
    _isARequestInFlight: boolean;
    _hasFetched: boolean;
    _getConnectionFromProps: any;
    _getFragmentVariables: any;
    _init: boolean;
    _direction: string;
    _refetchVariables: Variables;
    constructor();
    init(prevResult: ContainerResult): void;
    dispose(): void;
    _cleanup(): void;
    _getConnectionData(data: any): {
        cursor: string;
        edgeCount: number;
        hasMore: boolean;
    };
    hasMore: (prevResult: ContainerResult) => boolean;
    isLoading: () => boolean;
    refetchConnection: (environment: any, connectionConfig: ConnectionConfig, props: any, prevResult: ContainerResult, setResult: any, totalCount: number, observerOrCallback: any, refetchVariables: any) => any;
    loadMore(environment: IEnvironment, connectionConfig: ConnectionConfig, props: any, pageSize: number, observerOrCallback: ObserverOrCallback, options: RefetchOptions, prevResult: ContainerResult, setResult: any): any;
    _fetchPage(environment: IEnvironment, prevResult: ContainerResult, setResult: any, connectionConfig: ConnectionConfig, propsFragment: any, paginatingVariables: {
        count: number;
        cursor: string;
        totalCount: number;
    }, observer: Observer<void>, options: RefetchOptions): Subscription;
}
export default FragmentPagination;
