'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var PropTypes = _interopDefault(require('prop-types'));
var styled = require('styled-components');
var styled__default = _interopDefault(styled);
var polished = require('polished');
var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutPropertiesLoose = _interopDefault(require('@babel/runtime/helpers/objectWithoutPropertiesLoose'));
var React = require('react');
var React__default = _interopDefault(React);
var system$2 = require('@smooth-ui/system');
var system$2__default = _interopDefault(system$2);
var _inheritsLoose = _interopDefault(require('@babel/runtime/helpers/inheritsLoose'));
var _taggedTemplateLiteralLoose = _interopDefault(require('@babel/runtime/helpers/taggedTemplateLiteralLoose'));
var FocusLock = _interopDefault(require('react-focus-lock'));
var reactRemoveScroll = require('react-remove-scroll');
var Transition = _interopDefault(require('react-transition-group/Transition'));
var reactDom = require('react-dom');
var PopperJs = _interopDefault(require('popper.js'));

var wrapEvent = function wrapEvent(handler, cb) {
  return function (event) {
    if (handler) {
      handler(event);
    }

    if (!event.defaultPrevented) {
      cb(event);
    }
  };
};
var stopPropagation = function stopPropagation(event) {
  return event.stopPropagation();
};

var mediaMinWidth = function mediaMinWidth(value) {
  return "@media (min-width: " + value + "px)";
};
var mediaMaxWidth = function mediaMaxWidth(value) {
  return "@media (max-width: " + value + "px)";
};
var mediaBetweenWidth = function mediaBetweenWidth(min, max) {
  return "@media (min-width: " + min + "px) and (max-width: " + max + "px)";
};

var is = function is(n) {
  return n !== undefined && n !== null;
};
var num = function num(n) {
  return typeof n === 'number' && !Number.isNaN(n);
};
var string = function string(n) {
  return typeof n === 'string';
};
var func = function func(n) {
  return typeof n === 'function';
};
var get = function get(obj) {
  for (var _len = arguments.length, paths = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    paths[_key - 1] = arguments[_key];
  }

  return paths.join('.').split('.').reduce(function (a, b) {
    return a && is(a[b]) ? a[b] : undefined;
  }, obj);
};
var cascade = function cascade(fn) {
  if (!func(fn)) return fn;

  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  var next = fn.apply(void 0, args);
  return cascade.apply(void 0, [next].concat(args));
};
var omit = function omit(obj, fields) {
  var shallowCopy = _extends({}, obj);

  for (var i = 0; i < fields.length; i += 1) {
    var key = fields[i];
    delete shallowCopy[key];
  }

  return shallowCopy;
};

var getTheme = function getTheme(_ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? {} : _ref$theme;
  return theme;
};
var thd = function thd(name, defaultValue, transform) {
  var getFromProps = function getFromProps(p) {
    var value = cascade(function (p) {
      return get(getTheme(p), name);
    }, p);

    if (value === undefined) {
      return cascade(defaultValue, p);
    }

    if (transform) {
      return transform(value);
    }

    return value;
  };

  getFromProps["default"] = defaultValue;
  return getFromProps;
};
var th = function th(name, transform) {
  return function (p) {
    var value = cascade(function (p) {
      return get(getTheme(p), name);
    }, p);

    if (!is(value)) {
      throw new Error(name + " not found in theme");
    }

    if (transform) {
      return transform(value);
    }

    return value;
  };
};
var mixin = function mixin(name, defaultFn) {
  var mixinFn = function mixinFn() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return function (p) {
      var fn = get(getTheme(p), name) || defaultFn;
      return fn.apply(void 0, args)(p);
    };
  };

  mixinFn["default"] = defaultFn;
  return mixinFn;
};
function definitionsToTheme(values) {
  var theme = {};
  var themingKeys = Object.keys(values);

  for (var i = 0; i < themingKeys.length; i++) {
    var key = themingKeys[i];
    var value = values[key];
    theme[key] = value && value["default"] !== undefined ? value["default"] : value;
  }

  return theme;
}

var unit = function unit(_unit) {
  return function (value) {
    return num(value) ? "" + value + _unit : value;
  };
};
var negative = function negative(value) {
  if (!value) return value;
  if (num(value)) return -value;
  if (string(value)) return "-" + value;
  var obj = {};
  var keys = Object.keys(value);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    obj[key] = negative(value[key]);
  }

  return obj;
};
var px =
/*#__PURE__*/
unit('px');
var calc = function calc(value, fn) {
  var _String$match = String(value).match(/([\d.]+)\s*(.*)/),
      num = _String$match[1],
      unit = _String$match[2];

  return "" + fn(Number(num)) + (unit || 'px');
};

var black =
/*#__PURE__*/
thd('black', '#000');
var white =
/*#__PURE__*/
thd('white', '#fff');
var gray100 =
/*#__PURE__*/
thd('gray100', '#f8f9fa');
var gray200 =
/*#__PURE__*/
thd('gray200', '#e9ecef');
var gray300 =
/*#__PURE__*/
thd('gray300', '#dee2e6');
var gray400 =
/*#__PURE__*/
thd('gray400', '#ced4da');
var gray500 =
/*#__PURE__*/
thd('gray500', '#adb5bd');
var gray600 =
/*#__PURE__*/
thd('gray600', '#6c757d');
var gray700 =
/*#__PURE__*/
thd('gray700', '#495057');
var gray800 =
/*#__PURE__*/
thd('gray800', '#343a40');
var gray900 =
/*#__PURE__*/
thd('gray900', '#212529');
var blue =
/*#__PURE__*/
thd('blue', '#007bff');
var indigo =
/*#__PURE__*/
thd('indigo', '#6610f2');
var purple =
/*#__PURE__*/
thd('purple', '#6f42c1');
var pink =
/*#__PURE__*/
thd('pink', '#e83e8c');
var red =
/*#__PURE__*/
thd('red', '#dc3545');
var brick =
/*#__PURE__*/
thd('brick', '#bd4932');
var orange =
/*#__PURE__*/
thd('orange', '#fd7e14');
var yellow =
/*#__PURE__*/
thd('yellow', '#ffc107');
var green =
/*#__PURE__*/
thd('green', '#28a745');
var teal =
/*#__PURE__*/
thd('teal', '#20c997');
var cyan =
/*#__PURE__*/
thd('cyan', '#17a2b8');
var primary =
/*#__PURE__*/
thd('primary', brick);
var secondary =
/*#__PURE__*/
thd('secondary', gray600);
var success =
/*#__PURE__*/
thd('success', green);
var info =
/*#__PURE__*/
thd('info', cyan);
var warning =
/*#__PURE__*/
thd('warning', yellow);
var danger =
/*#__PURE__*/
thd('danger', red);
var light =
/*#__PURE__*/
thd('light', gray100);
var dark =
/*#__PURE__*/
thd('dark', gray800);
var primaryLight =
/*#__PURE__*/
thd('primaryLight', function (p) {
  return polished.lighten(0.3, primary(p));
});
var secondaryLight =
/*#__PURE__*/
thd('secondaryLight', function (p) {
  return polished.lighten(0.3, secondary(p));
});
var colorVariants =
/*#__PURE__*/
thd('colorVariants', ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark']);
var colors =
/*#__PURE__*/
thd('colors', {
  black: black,
  white: white,
  gray100: gray100,
  gray200: gray200,
  gray300: gray300,
  gray400: gray400,
  gray500: gray500,
  gray600: gray600,
  gray700: gray700,
  gray800: gray800,
  gray900: gray900,
  blue: blue,
  indigo: indigo,
  purple: purple,
  pink: pink,
  red: red,
  brick: brick,
  orange: orange,
  yellow: yellow,
  green: green,
  teal: teal,
  cyan: cyan,
  primary: primary,
  secondary: secondary,
  success: success,
  info: info,
  warning: warning,
  danger: danger,
  light: light,
  dark: dark
});
var colorInterval =
/*#__PURE__*/
thd('colorInterval', 0.08);
var colorVariant =
/*#__PURE__*/
mixin('colorVariant', function (variant) {
  return function (p) {
    var thValue = thd(variant)(p);
    if (thValue) return thValue;
    var colorValue = colors(p)[variant];
    if (colorValue) return colorValue(p);
    return variant;
  };
});
var colorLevel =
/*#__PURE__*/
mixin('colorLevel', function (color, level) {
  return function (p) {
    var baseColor = level > 0 ? black(p) : white(p);
    var absLevel = Math.abs(level);
    return polished.mix(absLevel * colorInterval(p), baseColor, color);
  };
});
var yiqContrastedThreshold =
/*#__PURE__*/
thd('yiqContrastedThreshold', 150);
var yikTextDark =
/*#__PURE__*/
thd('yikTextDark', '#111');
var yikTextLight =
/*#__PURE__*/
thd('yikTextLight', '#fff');
var colorYik =
/*#__PURE__*/
mixin('colorYik', function (color) {
  return function (p) {
    var _parseToRgb = polished.parseToRgb(color),
        r = _parseToRgb.red,
        g = _parseToRgb.green,
        b = _parseToRgb.blue;

    var yik = (r * 299 + g * 587 + b * 114) / 1000;
    return yik >= yiqContrastedThreshold(p) ? yikTextDark(p) : yikTextLight(p);
  };
});

var alertPaddingY =
/*#__PURE__*/
thd('alertPaddingY', '.75rem');
var alertPaddingX =
/*#__PURE__*/
thd('alertPaddingX', '1.25rem');
var alertMarginBottom =
/*#__PURE__*/
thd('alertMarginBottom', '1rem');
var alertColorLevel =
/*#__PURE__*/
thd('alertColorLevel', 6);
var alertBgLevel =
/*#__PURE__*/
thd('alertBgLevel', -10);
var alertBorderLevel =
/*#__PURE__*/
thd('alertBorderLevel', -9);
var alertVariant =
/*#__PURE__*/
mixin('alertVariant', function (variant) {
  return function (p) {
    var variantColor = colorVariant(variant)(p);
    var color = colorLevel(variantColor, alertColorLevel(p))(p);
    var bgColor = colorLevel(variantColor, alertBgLevel(p))(p);
    var borderColor = colorLevel(variantColor, alertBorderLevel(p))(p);
    var hrColor = polished.darken(0.05, color);
    return styled.css(["color:", ";background-color:", ";border-color:", ";hr{border-top-color:", ";}"], color, bgColor, borderColor, hrColor);
  };
});

var borderRadius =
/*#__PURE__*/
thd('borderRadius', '.25rem');
var borderRadiusSm =
/*#__PURE__*/
thd('borderRadiusSm', '.2rem');
var borderRadiusLg =
/*#__PURE__*/
thd('borderRadiusLg', '.3rem');
var borderWidth =
/*#__PURE__*/
thd('borderWidth', '1px');

var baseFocus =
/*#__PURE__*/
mixin('baseFocus', function (color) {
  return function () {
    return styled.css(["outline:0;border-color:", ";box-shadow:0 0 2px ", ";"], polished.lighten(0.25, color), polished.transparentize(0.1, color));
  };
});
var controlFocus =
/*#__PURE__*/
mixin('controlFocus', function (color) {
  return function () {
    return styled.css(["box-shadow:0 0 0 0.2rem ", ";"], polished.transparentize(0.75, color));
  };
});

var fontSizes =
/*#__PURE__*/
thd('fontSizes', [12, 14, 16, 20, 24, 32, 48, 64, 72]);
var fontFamily =
/*#__PURE__*/
thd('fontFamily', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif');
var fontSizeBase =
/*#__PURE__*/
thd('fontSizeBase', '1rem');
var fontSizeSm =
/*#__PURE__*/
thd('fontSizeSm', '1rem', function (s) {
  return polished.modularScale(-1, s);
});
var fontSizeLg =
/*#__PURE__*/
thd('fontSizeLg', '1rem', function (s) {
  return polished.modularScale(1, s);
});
var fontWeightLight =
/*#__PURE__*/
thd('fontWeightLight', 300);
var fontWeightNormal =
/*#__PURE__*/
thd('fontWeightNormal', 400);
var fontWeightBold =
/*#__PURE__*/
thd('fontWeightBold', 700);
var lineHeightBase =
/*#__PURE__*/
thd('lineHeightBase', 1.5);
var lineHeightSm =
/*#__PURE__*/
thd('lineHeightSm', 1.5);
var lineHeightLg =
/*#__PURE__*/
thd('lineHeightLg', 1.5);

var inputBtnPaddingY =
/*#__PURE__*/
thd('inputBtnPaddingY', '.375rem');
var inputBtnPaddingX =
/*#__PURE__*/
thd('inputBtnPaddingX', '.75rem');
var inputBtnLineHeight =
/*#__PURE__*/
thd('inputBtnLineHeight', lineHeightBase);
var inputBtnPaddingYSm =
/*#__PURE__*/
thd('inputBtnPaddingYSm', '.25rem');
var inputBtnPaddingXSm =
/*#__PURE__*/
thd('inputBtnPaddingXSm', '.5rem');
var inputBtnLineHeightSm =
/*#__PURE__*/
thd('inputBtnLineHeightSm', lineHeightSm);
var inputBtnPaddingYLg =
/*#__PURE__*/
thd('inputBtnPaddingYLg', '.5rem');
var inputBtnPaddingXLg =
/*#__PURE__*/
thd('inputBtnPaddingXLg', '1rem');
var inputBtnLineHeightLg =
/*#__PURE__*/
thd('inputBtnLineHeightLg', lineHeightLg);
var inputPaddingY =
/*#__PURE__*/
thd('inputPaddingY', inputBtnPaddingY);
var inputPaddingX =
/*#__PURE__*/
thd('inputPaddingX', inputBtnPaddingX);
var inputLineHeight =
/*#__PURE__*/
thd('inputLineHeight', inputBtnLineHeight);
var inputPaddingYSm =
/*#__PURE__*/
thd('inputPaddingYSm', inputBtnPaddingYSm);
var inputPaddingXSm =
/*#__PURE__*/
thd('inputPaddingXSm', inputBtnPaddingXSm);
var inputLineHeightSm =
/*#__PURE__*/
thd('inputLineHeightSm', inputBtnLineHeightSm);
var inputPaddingYLg =
/*#__PURE__*/
thd('inputPaddingYLg', inputBtnPaddingYLg);
var inputPaddingXLg =
/*#__PURE__*/
thd('inputPaddingXLg', inputBtnPaddingXLg);
var inputLineHeightLg =
/*#__PURE__*/
thd('inputLineHeightLg', inputBtnLineHeightLg);
var inputBorderWidth =
/*#__PURE__*/
thd('inputBorderWidth', borderWidth);
var inputBorderColor =
/*#__PURE__*/
thd('inputBorderColor', gray300);
var inputBgColor =
/*#__PURE__*/
thd('inputBgColor', white);
var inputDisabledBgColor =
/*#__PURE__*/
thd('inputDisabledBgColor', gray100);
var inputDisabledText =
/*#__PURE__*/
thd('inputDisabledText', gray600);
var inputPlaceholderText =
/*#__PURE__*/
thd('inputPlaceholderText', gray600);
var inputTextColor =
/*#__PURE__*/
thd('inputTextColor', gray900);

var btnPaddingY =
/*#__PURE__*/
thd('btnPaddingY', inputBtnPaddingY);
var btnPaddingX =
/*#__PURE__*/
thd('btnPaddingX', inputBtnPaddingX);
var btnLineHeight =
/*#__PURE__*/
thd('btnLineHeight', inputBtnLineHeight);
var btnPaddingYSm =
/*#__PURE__*/
thd('btnPaddingYSm', inputBtnPaddingYSm);
var btnPaddingXSm =
/*#__PURE__*/
thd('btnPaddingXSm', inputBtnPaddingXSm);
var btnLineHeightSm =
/*#__PURE__*/
thd('btnLineHeightSm', inputBtnLineHeightSm);
var btnPaddingYLg =
/*#__PURE__*/
thd('btnPaddingYLg', inputBtnPaddingYLg);
var btnPaddingXLg =
/*#__PURE__*/
thd('btnPaddingXLg', inputBtnPaddingXLg);
var btnLineHeightLg =
/*#__PURE__*/
thd('btnLineHeightLg', inputBtnLineHeightLg);
var btnBorderWidth =
/*#__PURE__*/
thd('btnBorderWidth', 0);
var btnDisabledOpacity =
/*#__PURE__*/
thd('btnDisabledOpacity', 0.8);
var btnVariant =
/*#__PURE__*/
mixin('btnVariant', function (variant) {
  return function (p) {
    var color = colorVariant(variant)(p);
    return styled.css(["color:", ";background-color:", ";&:focus{", ";}&:not(:disabled):hover,&:not(:disabled):active{background-color:", ";}"], colorYik(color)(p), color, baseFocus(color)(p), polished.darken(0.05, color));
  };
});

var gridColumns =
/*#__PURE__*/
thd('gridColumns', 12);
var gridGutter =
/*#__PURE__*/
thd('gridGutter', 1);
var gridMaxWidths =
/*#__PURE__*/
thd('gridMaxWidths', {
  sm: '540px',
  md: '720px',
  lg: '960px',
  xl: '1140px'
});

var headingsMarginBottom =
/*#__PURE__*/
thd('headingsMarginBottom', '.5rem');
var headingsFontFamily =
/*#__PURE__*/
thd('headingsFontFamily', fontFamily);
var headingsFontWeight =
/*#__PURE__*/
thd('headingsFontWeight', 500);
var headingsLineHeight =
/*#__PURE__*/
thd('headingsLineHeight', 1.2);
var headingsColor =
/*#__PURE__*/
thd('headingsColor', 'inherit');
var h1FontSize =
/*#__PURE__*/
thd('h1FontSize', '2.5rem');
var h2FontSize =
/*#__PURE__*/
thd('h2FontSize', '2rem');
var h3FontSize =
/*#__PURE__*/
thd('h3FontSize', '1.75rem');
var h4FontSize =
/*#__PURE__*/
thd('h4FontSize', '1.5rem');
var h5FontSize =
/*#__PURE__*/
thd('h5FontSize', '1.25rem');
var h6FontSize =
/*#__PURE__*/
thd('h6FontSize', '1rem');
var display1Size =
/*#__PURE__*/
thd('display1Size', '6rem');
var display2Size =
/*#__PURE__*/
thd('display2Size', '5.5rem');
var display3Size =
/*#__PURE__*/
thd('display3Size', '4.4rem');
var display4Size =
/*#__PURE__*/
thd('display4Size', '3.5rem');
var display1Weight =
/*#__PURE__*/
thd('display1Weight', 300);
var display2Weight =
/*#__PURE__*/
thd('display2Weight', 300);
var display3Weight =
/*#__PURE__*/
thd('display3Weight', 300);
var display4Weight =
/*#__PURE__*/
thd('display4Weight', 300);
var displayLineHeight =
/*#__PURE__*/
thd('displayLineHeight', headingsLineHeight);

var modalBackdropBg =
/*#__PURE__*/
thd('modalBackdropBg', 'rgba(0, 0, 0, 0.5)');
var modalTransitionDuration =
/*#__PURE__*/
thd('modalTransitionDuration', 300);
var modalInnerPadding =
/*#__PURE__*/
thd('modalInnerPadding', '1rem');
var modalDialogMargin =
/*#__PURE__*/
thd('modalDialogMargin', '0.5rem');
var modalDialogMarginYSmUp =
/*#__PURE__*/
thd('modalDialogMarginYSmUp', '1.75rem');
var modalContentBg =
/*#__PURE__*/
thd('modalContentBg', white);
var modalContentBorderWidth =
/*#__PURE__*/
thd('modalContentBorderWidth', borderWidth);
var modalContentBorderColor =
/*#__PURE__*/
thd('modalContentBorderColor', black, function (color) {
  return polished.transparentize(0.8, color);
});
var modalContentBorderRadius =
/*#__PURE__*/
thd('modalContentBorderRadius', borderRadiusLg);
var modalContentBoxShadowXs =
/*#__PURE__*/
thd('modalContentBoxShadowXs', function (p) {
  return styled.css(["box-shadow:0 0.25rem 0.5rem ", ";"], polished.transparentize(0.8, black(p)));
});
var modalContentBoxShadowSmUp =
/*#__PURE__*/
thd('modalContentBoxShadowSmUp', function (p) {
  return styled.css(["box-shadow:0 0.5rem 1rem ", ";"], polished.transparentize(0.8, black(p)));
});
var modalHeaderBorderColor =
/*#__PURE__*/
thd('modalHeaderBorderColor', gray200);
var modalFooterBorderColor =
/*#__PURE__*/
thd('modalFooterBorderColor', modalHeaderBorderColor);
var modalHeaderBorderWidth =
/*#__PURE__*/
thd('modalHeaderBorderWidth', modalContentBorderWidth);
var modalFooterBorderWidth =
/*#__PURE__*/
thd('modalFooterBorderWidth', modalHeaderBorderWidth);

var breakpoints =
/*#__PURE__*/
thd('breakpoints', {
  xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200
});
/**
 * Minimum breakpoint width.
 * Null for the smallest breakpoint.
 */

var getBreakpointMin = function getBreakpointMin(name, p) {
  var bks = breakpoints(p);
  var breakPoint = bks[name];
  return breakPoint !== 0 ? breakPoint : null;
};
/**
 * Maximum breakpoint width. Null for the largest (last) breakpoint.
 * The maximum value is calculated as the minimum of the next one less 0.02px
 * to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
 * See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
 * Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
 * See https://bugs.webkit.org/show_bug.cgi?id=178261
 */


var getBreakpointMax = function getBreakpointMax(name, p) {
  var bks = breakpoints(p);
  var breakPoint = bks[name];
  return breakPoint !== 0 ? breakPoint - 0.02 : null;
};

var up =
/*#__PURE__*/
mixin('up', function (name, code) {
  return function (p) {
    var value = getBreakpointMin(name, p);
    if (value === null) return code;
    return styled.css(["", "{", ";}"], mediaMinWidth(value), code);
  };
});
var down =
/*#__PURE__*/
mixin('down', function (name, code) {
  return function (p) {
    var value = getBreakpointMax(name, p);
    if (value === null) return null;
    return styled.css(["", "{", ";}"], mediaMaxWidth(value), code);
  };
});
var between =
/*#__PURE__*/
mixin('between', function (lower, upper, code) {
  return function (p) {
    var min = getBreakpointMin(lower, p);
    var max = getBreakpointMax(upper, p);

    if (min !== null && max !== null) {
      return styled.css(["", "{", ";}"], mediaBetweenWidth(min, max), code);
    }

    if (max === null) return up(lower, code)(p);
    if (min === null) return down(upper, code)(p);
    return null;
  };
});

var spaces =
/*#__PURE__*/
thd('spaces', [0, 8, 16, 24, 32, 40, 48, 56, 64, 72]);

var safeTransitionAttrs = ['color', 'border-style', 'border-color', 'visibility', 'background', 'background-color', 'text-decoration', 'box-shadow', 'transform', 'opacity'];
var transitionEnabled =
/*#__PURE__*/
thd('transitionEnabled', true);
var transitionDuration =
/*#__PURE__*/
thd('transitionDuration', '.2s');
var transitionEasingFunc =
/*#__PURE__*/
thd('transitionEasingFunc', 'ease-in-out');
var transition =
/*#__PURE__*/
mixin('transition', function (value) {
  return function (p) {
    if (!transitionEnabled(p)) return null;
    return styled.css(["transition:", ";@media screen and (prefers-reduced-motion:reduce){transition:none;}"], value);
  };
});
var transitionBase =
/*#__PURE__*/
thd('transitionBase', function (p) {
  return transition(safeTransitionAttrs.map(function (attr) {
    return attr + " " + transitionDuration(p) + " " + transitionEasingFunc(p);
  }).join(','))(p);
});

var zIndexControl =
/*#__PURE__*/
thd('zIndexControl', 1);
var zIndexInnerSwitch =
/*#__PURE__*/
thd('zIndexInnerSwitch', 10);
var zIndexModal =
/*#__PURE__*/
thd('zIndexModal', 1050);
var zIndexModalBackdrop =
/*#__PURE__*/
thd('zIndexModalBackdrop', 1071);



var theming = /*#__PURE__*/Object.freeze({
  alertPaddingY: alertPaddingY,
  alertPaddingX: alertPaddingX,
  alertMarginBottom: alertMarginBottom,
  alertColorLevel: alertColorLevel,
  alertBgLevel: alertBgLevel,
  alertBorderLevel: alertBorderLevel,
  alertVariant: alertVariant,
  borderRadius: borderRadius,
  borderRadiusSm: borderRadiusSm,
  borderRadiusLg: borderRadiusLg,
  borderWidth: borderWidth,
  btnPaddingY: btnPaddingY,
  btnPaddingX: btnPaddingX,
  btnLineHeight: btnLineHeight,
  btnPaddingYSm: btnPaddingYSm,
  btnPaddingXSm: btnPaddingXSm,
  btnLineHeightSm: btnLineHeightSm,
  btnPaddingYLg: btnPaddingYLg,
  btnPaddingXLg: btnPaddingXLg,
  btnLineHeightLg: btnLineHeightLg,
  btnBorderWidth: btnBorderWidth,
  btnDisabledOpacity: btnDisabledOpacity,
  btnVariant: btnVariant,
  black: black,
  white: white,
  gray100: gray100,
  gray200: gray200,
  gray300: gray300,
  gray400: gray400,
  gray500: gray500,
  gray600: gray600,
  gray700: gray700,
  gray800: gray800,
  gray900: gray900,
  blue: blue,
  indigo: indigo,
  purple: purple,
  pink: pink,
  red: red,
  brick: brick,
  orange: orange,
  yellow: yellow,
  green: green,
  teal: teal,
  cyan: cyan,
  primary: primary,
  secondary: secondary,
  success: success,
  info: info,
  warning: warning,
  danger: danger,
  light: light,
  dark: dark,
  primaryLight: primaryLight,
  secondaryLight: secondaryLight,
  colorVariants: colorVariants,
  colors: colors,
  colorInterval: colorInterval,
  colorVariant: colorVariant,
  colorLevel: colorLevel,
  yiqContrastedThreshold: yiqContrastedThreshold,
  yikTextDark: yikTextDark,
  yikTextLight: yikTextLight,
  colorYik: colorYik,
  baseFocus: baseFocus,
  controlFocus: controlFocus,
  gridColumns: gridColumns,
  gridGutter: gridGutter,
  gridMaxWidths: gridMaxWidths,
  headingsMarginBottom: headingsMarginBottom,
  headingsFontFamily: headingsFontFamily,
  headingsFontWeight: headingsFontWeight,
  headingsLineHeight: headingsLineHeight,
  headingsColor: headingsColor,
  h1FontSize: h1FontSize,
  h2FontSize: h2FontSize,
  h3FontSize: h3FontSize,
  h4FontSize: h4FontSize,
  h5FontSize: h5FontSize,
  h6FontSize: h6FontSize,
  display1Size: display1Size,
  display2Size: display2Size,
  display3Size: display3Size,
  display4Size: display4Size,
  display1Weight: display1Weight,
  display2Weight: display2Weight,
  display3Weight: display3Weight,
  display4Weight: display4Weight,
  displayLineHeight: displayLineHeight,
  inputBtnPaddingY: inputBtnPaddingY,
  inputBtnPaddingX: inputBtnPaddingX,
  inputBtnLineHeight: inputBtnLineHeight,
  inputBtnPaddingYSm: inputBtnPaddingYSm,
  inputBtnPaddingXSm: inputBtnPaddingXSm,
  inputBtnLineHeightSm: inputBtnLineHeightSm,
  inputBtnPaddingYLg: inputBtnPaddingYLg,
  inputBtnPaddingXLg: inputBtnPaddingXLg,
  inputBtnLineHeightLg: inputBtnLineHeightLg,
  inputPaddingY: inputPaddingY,
  inputPaddingX: inputPaddingX,
  inputLineHeight: inputLineHeight,
  inputPaddingYSm: inputPaddingYSm,
  inputPaddingXSm: inputPaddingXSm,
  inputLineHeightSm: inputLineHeightSm,
  inputPaddingYLg: inputPaddingYLg,
  inputPaddingXLg: inputPaddingXLg,
  inputLineHeightLg: inputLineHeightLg,
  inputBorderWidth: inputBorderWidth,
  inputBorderColor: inputBorderColor,
  inputBgColor: inputBgColor,
  inputDisabledBgColor: inputDisabledBgColor,
  inputDisabledText: inputDisabledText,
  inputPlaceholderText: inputPlaceholderText,
  inputTextColor: inputTextColor,
  modalBackdropBg: modalBackdropBg,
  modalTransitionDuration: modalTransitionDuration,
  modalInnerPadding: modalInnerPadding,
  modalDialogMargin: modalDialogMargin,
  modalDialogMarginYSmUp: modalDialogMarginYSmUp,
  modalContentBg: modalContentBg,
  modalContentBorderWidth: modalContentBorderWidth,
  modalContentBorderColor: modalContentBorderColor,
  modalContentBorderRadius: modalContentBorderRadius,
  modalContentBoxShadowXs: modalContentBoxShadowXs,
  modalContentBoxShadowSmUp: modalContentBoxShadowSmUp,
  modalHeaderBorderColor: modalHeaderBorderColor,
  modalFooterBorderColor: modalFooterBorderColor,
  modalHeaderBorderWidth: modalHeaderBorderWidth,
  modalFooterBorderWidth: modalFooterBorderWidth,
  breakpoints: breakpoints,
  up: up,
  down: down,
  between: between,
  spaces: spaces,
  transitionEnabled: transitionEnabled,
  transitionDuration: transitionDuration,
  transitionEasingFunc: transitionEasingFunc,
  transition: transition,
  transitionBase: transitionBase,
  fontSizes: fontSizes,
  fontFamily: fontFamily,
  fontSizeBase: fontSizeBase,
  fontSizeSm: fontSizeSm,
  fontSizeLg: fontSizeLg,
  fontWeightLight: fontWeightLight,
  fontWeightNormal: fontWeightNormal,
  fontWeightBold: fontWeightBold,
  lineHeightBase: lineHeightBase,
  lineHeightSm: lineHeightSm,
  lineHeightLg: lineHeightLg,
  zIndexControl: zIndexControl,
  zIndexInnerSwitch: zIndexInnerSwitch,
  zIndexModal: zIndexModal,
  zIndexModalBackdrop: zIndexModalBackdrop
});

function getSystemPropTypes(system) {
  if (!system) return {};
  return system.meta.props.reduce(function (obj, prop) {
    obj[prop] = PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object]);
    return obj;
  }, {});
}



var systemDefs = /*#__PURE__*/Object.freeze({
  colors: colors,
  fontSizes: fontSizes,
  spaces: spaces
});

var defaultSystemTheme =
/*#__PURE__*/
definitionsToTheme(systemDefs);

function getProps(props, defaultProps) {
  var theme = _extends({}, defaultSystemTheme, getTheme(props));

  return _extends({}, defaultProps, props, {
    theme: theme
  });
}

function createComponent(getConfig) {
  var _getConfig = getConfig(),
      name = _getConfig.name,
      style = _getConfig.style,
      _getConfig$omitProps = _getConfig.omitProps,
      omitProps = _getConfig$omitProps === void 0 ? [] : _getConfig$omitProps,
      _getConfig$defaultPro = _getConfig.defaultProps,
      defaultProps = _getConfig$defaultPro === void 0 ? {} : _getConfig$defaultPro,
      _getConfig$propTypes = _getConfig.propTypes,
      propTypes = _getConfig$propTypes === void 0 ? {} : _getConfig$propTypes,
      _getConfig$render = _getConfig.render,
      render = _getConfig$render === void 0 ? function (_ref) {
    var Component = _ref.Component,
        props = _objectWithoutPropertiesLoose(_ref, ["Component"]);

    return React__default.createElement(Component, props);
  } : _getConfig$render,
      _getConfig$defaultCom = _getConfig.defaultComponent,
      defaultComponent = _getConfig$defaultCom === void 0 ? 'div' : _getConfig$defaultCom,
      _getConfig$system = _getConfig.system,
      system = _getConfig$system === void 0 ? system$2.system : _getConfig$system,
      _getConfig$applySyste = _getConfig.applySystem,
      applySystem = _getConfig$applySyste === void 0 ? function (system) {
    return function (props) {
      return {
        '&&': system.props(props)
      };
    };
  } : _getConfig$applySyste,
      InnerComponentFromConfig = _getConfig.InnerComponent;

  var omittedProps = ['theme'].concat(system ? system.meta.props : {}, omitProps);
  var baseClassName = "sui-" + name;

  var InnerComponent = InnerComponentFromConfig || function Component(_ref2) {
    var className = _ref2.className,
        as = _ref2.as,
        forwardedRef = _ref2.forwardedRef,
        props = _objectWithoutPropertiesLoose(_ref2, ["className", "as", "forwardedRef"]);

    var Component = as || defaultComponent;

    var renderProps = _extends({
      ref: forwardedRef,
      Component: Component,
      className: className ? baseClassName + " " + className : baseClassName
    }, omit(props, omittedProps));

    return render(renderProps);
  };

  InnerComponent.displayName = "sui-" + name;

  function forwardRef(props, ref) {
    return React__default.createElement(InnerComponent, _extends({}, props, {
      forwardedRef: ref
    }));
  }

  forwardRef.displayName = InnerComponent.displayName;
  var RefComponent = React__default.forwardRef(forwardRef);
  RefComponent.displayName = InnerComponent.displayName;
  var StyledComponent = styled__default(RefComponent)(function (p) {
    var styles = [];
    var props = getProps(p, defaultProps);

    if (func(style)) {
      styles.push(style(props));
    }

    if (func(applySystem)) {
      styles.push(applySystem(system)(props));
    }

    return styles;
  });
  StyledComponent.propTypes = _extends({
    theme: PropTypes.object
  }, getSystemPropTypes(system), propTypes);
  StyledComponent.defaultProps = _extends({}, defaultProps);
  return StyledComponent;
}

var Alert =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'alert',
    omitProps: ['variant'],
    style: function style(p) {
      return styled.css(["position:relative;padding:", " ", ";margin-bottom:", ";border:1px solid transparent;border-radius:", ";", ";"], alertPaddingY(p), alertPaddingX(p), alertMarginBottom(p), borderRadius(p), p.variant && alertVariant(p.variant)(p));
    },
    propTypes: {
      children: PropTypes.node,
      variant: PropTypes.string
    },
    defaultProps: {
      variant: 'primary'
    }
  };
});

var Box =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'box'
  };
});

var Breakpoint =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'breakpoint',
    omitProps: ['up', 'down'],
    style: function style(p) {
      return styled.css(["display:none;", ";", ";"], p.up && up(p.up, 'display: block;')(p), p.down && down(p.down, 'display: block;')(p));
    },
    propTypes: {
      children: PropTypes.node,
      up: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
      down: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl'])
    }
  };
});

var btnSize = {
  sm: function sm(p) {
    return styled.css(["padding:", " ", ";font-size:", ";border-radius:", ";line-height:", ";"], btnPaddingYSm(p), btnPaddingXSm(p), fontSizeSm(p), borderRadiusSm(p), btnLineHeightSm(p));
  },
  md: function md(p) {
    return styled.css(["padding:", " ", ";font-size:", ";border-radius:", ";line-height:", ";"], btnPaddingY(p), btnPaddingX(p), fontSizeBase(p), borderRadius(p), btnLineHeight(p));
  },
  lg: function lg(p) {
    return styled.css(["padding:", " ", ";font-size:", ";border-radius:", ";line-height:", ";"], btnPaddingYLg(p), btnPaddingXLg(p), fontSizeLg(p), borderRadiusLg(p), btnLineHeightLg(p));
  }
};
var Button =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'button',
    defaultComponent: 'button',
    omitProps: ['size', 'variant'],
    style: function style(p) {
      return styled.css(["display:inline-block;z-index:", ";border-width:", ";cursor:pointer;", ";text-decoration:none;&:disabled{opacity:", ";}", ";", ";"], zIndexControl(p), btnBorderWidth(p), transitionBase(p), btnDisabledOpacity(p), p.size && btnSize[p.size] && btnSize[p.size](p), p.variant && btnVariant(p.variant)(p));
    },
    propTypes: {
      children: PropTypes.node,
      disabled: PropTypes.bool,
      size: PropTypes.oneOf(['sm', 'md', 'lg']),
      variant: PropTypes.string
    },
    defaultProps: {
      size: 'md',
      variant: 'primary'
    }
  };
});

function create() {
  var SwitchState =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(SwitchState, _Component);

    function SwitchState() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _Component.call.apply(_Component, [this].concat(args)) || this;
      _this.state = {
        focused: false,
        checked: _this.props.checked || _this.props.defaultChecked || false
      };

      _this.handleChange = function (event) {
        if (_this.props.checked === undefined) {
          _this.setState({
            checked: event.currentTarget.checked
          });
        }

        if (_this.props.onChange) {
          _this.props.onChange(event);
        }
      };

      _this.handleFocus = function (event) {
        _this.setState({
          focused: true
        });

        if (_this.props.onFocus) {
          _this.props.onFocus(event);
        }
      };

      _this.handleBlur = function (event) {
        _this.setState({
          focused: false
        });

        if (_this.props.onBlur) {
          _this.props.onBlur(event);
        }
      };

      return _this;
    }

    SwitchState.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
      if (props.checked !== undefined && props.checked !== state.checked) {
        return _extends({}, state, {
          checked: props.checked
        });
      }

      return state;
    };

    var _proto = SwitchState.prototype;

    _proto.render = function render() {
      var _this$props = this.props,
          checked = _this$props.checked,
          children = _this$props.children,
          defaultChecked = _this$props.defaultChecked,
          onChange = _this$props.onChange,
          onBlur = _this$props.onBlur,
          onFocus = _this$props.onFocus,
          style = _this$props.style,
          props = _objectWithoutPropertiesLoose(_this$props, ["checked", "children", "defaultChecked", "onChange", "onBlur", "onFocus", "style"]);

      return this.props.children({
        focused: this.state.focused,
        checked: this.state.checked,
        disabled: props.disabled,
        input: _extends({
          checked: this.state.checked,
          onChange: this.handleChange,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur,
          style: _extends({
            position: 'absolute',
            margin: 0,
            padding: 0,
            top: 0,
            right: 0,
            left: 0,
            bottom: 0,
            opacity: 0,
            width: '100%',
            height: '100%',
            zIndex: 10
          }, style)
        }, props)
      });
    };

    return SwitchState;
  }(React.Component);

  return SwitchState;
}

var SwitchState = /*#__PURE__*/
create();

var sizeStyle = {
  sm: function sm(p) {
    return styled.css([".sui-checkbox-content{border-radius:", ";width:0.875rem;height:0.875rem;}.sui-checkbox-check{width:8px;height:8px;}"], borderRadiusSm(p));
  },
  md: function md(p) {
    return styled.css([".sui-checkbox-content{border-radius:", ";width:1rem;height:1rem;}.sui-checkbox-check{width:10px;height:10px;}"], borderRadius(p));
  },
  lg: function lg(p) {
    return styled.css([".sui-checkbox-content{border-radius:", ";width:1.25rem;height:1.25rem;}.sui-checkbox-check{width:12px;height:12px;}"], borderRadiusLg(p));
  }
};

var validStyle = function validStyle(p) {
  var valid = p.valid;
  if (valid !== true && valid !== false) return null;
  var color = valid ? success(p) : danger(p);
  return styled.css(["input + .sui-checkbox-content,input:checked + .sui-checkbox-content{border-color:", ";}input:checked + .sui-checkbox-content{background-color:", ";}input:focus + .sui-checkbox-content{border-color:", ";", "}"], color, color, color, controlFocus(color)(p));
};

var controlStyle = function controlStyle(p) {
  return styled.css(["input:focus + .sui-checkbox-content{", "}", ";"], controlFocus(primary(p))(p), validStyle(p));
};

var containerSystem =
/*#__PURE__*/
system$2.compose(system$2.basics, system$2.dimensions, system$2.space, system$2.flexboxes, system$2.positions);
var contentSystem =
/*#__PURE__*/
system$2.compose(system$2.dimensions, system$2.backgrounds, system$2.borders);
var system =
/*#__PURE__*/
system$2.compose(containerSystem, contentSystem);
var Checkbox =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'checkbox',
    omitProps: ['control', 'valid'],
    system: system,
    applySystem: null,
    render: function render(_ref) {
      var Component = _ref.Component,
          ref = _ref.ref,
          className = _ref.className,
          size = _ref.size,
          props = _objectWithoutPropertiesLoose(_ref, ["Component", "ref", "className", "size"]);

      return React__default.createElement(SwitchState, props, function (_ref2) {
        var input = _ref2.input;
        return React__default.createElement(Component, {
          className: className
        }, React__default.createElement("input", _extends({
          ref: ref,
          type: "checkbox"
        }, input)), React__default.createElement("div", {
          className: "sui-checkbox-content"
        }, React__default.createElement("svg", {
          className: "sui-checkbox-check",
          viewBox: "0 0 512 512"
        }, React__default.createElement("path", {
          fill: "currentColor",
          d: "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"
        }))));
      });
    },
    style: function style(p) {
      return styled.css(["display:inline-flex;align-items:center;justify-content:center;position:relative;width:1.5rem;height:1.5rem;z-index:", ";.sui-checkbox-check{pointer-events:none;transform:scale(0);transform-origin:center;color:", ";", ";}.sui-checkbox-content{display:flex;align-items:center;justify-content:center;width:1rem;height:1rem;background-color:", ";border-radius:", ";border-style:solid;border-width:", ";border-color:", ";", ";}input:checked + .sui-checkbox-content{background-color:", ";border-color:transparent;svg{transform:scale(1);}}input:focus + .sui-checkbox-content{", ";}input:disabled + .sui-checkbox-content{background-color:", ";}", ";", ";", ";.sui-checkbox-content{", ";}"], zIndexControl(p), white(p), transitionBase(p), inputBgColor(p), borderRadius(p), inputBorderWidth(p), inputBorderColor(p), transitionBase(p), primary(p), baseFocus(primary(p))(p), inputDisabledBgColor(p), sizeStyle[p.size] && sizeStyle[p.size] && sizeStyle[p.size](p), p.control && controlStyle(p), containerSystem.props, contentSystem.props);
    },
    propTypes: {
      checked: PropTypes.bool,
      control: PropTypes.bool,
      disabled: PropTypes.bool,
      onChange: PropTypes.func,
      size: PropTypes.oneOf(['sm', 'md', 'lg']),
      valid: PropTypes.bool,
      value: PropTypes.string
    },
    defaultProps: {
      size: 'md'
    }
  };
});

var common = {
  position: 'relative',
  width: '100%',
  minHeight: '1px'
};

function isValidSize(size) {
  return size || size === 0;
}

function getSizeWidth(size, nbColumns) {
  return Math.round(size / nbColumns * Math.pow(10, 6)) / Math.pow(10, 4) + "%";
}

function getOffsetStyle(offsetSize, nbColumns) {
  if (isValidSize(offsetSize)) {
    var marginLeft = getSizeWidth(offsetSize, nbColumns);
    return {
      marginLeft: marginLeft
    };
  }

  return null;
}

function getBreakPointStyle(breakpoint, width, p) {
  var size = p[breakpoint];
  if (!isValidSize(size)) return null;
  var nbColumns = gridColumns(p);
  var mediaQuery = mediaMinWidth(width);

  var media = function media(style) {
    var _ref;

    return width === 0 ? style : (_ref = {}, _ref[mediaQuery] = style, _ref);
  };

  if (size === true) {
    return _extends({}, common, media({
      flexBasis: 0,
      flexGrow: 1,
      maxWidth: '100%'
    }));
  }

  if (size === 'auto') {
    return _extends({}, common, media({
      flex: "0 0 auto",
      maxWidth: 'none',
      width: 'auto'
    }));
  }

  var sizeWidth = getSizeWidth(size, nbColumns);
  return _extends({}, common, media(_extends({
    flex: "0 0 " + sizeWidth,
    maxWidth: sizeWidth
  }, getOffsetStyle(p["o" + breakpoint], nbColumns))));
}

function getStyleFromProps(p) {
  var _p$gutter = p.gutter,
      gutter = _p$gutter === void 0 ? gridGutter(p) : _p$gutter;
  var bk = breakpoints(p);
  var breakpointsKeys = Object.keys(bk);
  var style = {
    boxSizing: 'border-box',
    flexBasis: 0,
    flexGrow: 1,
    maxWidth: '100%'
  };
  style = system$2.merge(style, system$2.pl({
    pl: gutter
  })(p));
  style = system$2.merge(style, system$2.pr({
    pr: gutter
  })(p));
  var index = -1; // eslint-disable-next-line no-plusplus

  while (++index < breakpointsKeys.length) {
    var breakpoint = breakpointsKeys[index];
    style = system$2.merge(style, getBreakPointStyle(breakpoint, bk[breakpoint], p));
  }

  return style;
}

function create$1() {
  var Col = createComponent(function () {
    return {
      name: 'col',
      omitProps: ['xs', 'sm', 'md', 'lg', 'xl', 'oxs', 'osm', 'omd', 'olg', 'oxl', 'gutter'],
      style: getStyleFromProps,
      propTypes: {
        children: PropTypes.node,
        gutter: getSystemPropTypes(system$2.pr).pr,
        xs: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        sm: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        md: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        lg: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        xl: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number]),
        oxs: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        osm: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        omd: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        olg: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
        oxl: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
      }
    };
  });
  var Split = createComponent(function () {
    return {
      name: 'col-split',
      style: function style() {
        return styled.css(["width:100% !important;"]);
      }
    };
  });
  Col.Split = Split;
  return Col;
}

var Col = /*#__PURE__*/
create$1();

var ControlFeedback =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'control-feedback',
    omitProps: ['valid'],
    style: function style(p) {
      return styled.css(["width:100%;margin-top:0.25rem;font-size:80%;color:", ";"], p.valid ? success(p) : danger(p));
    },
    propTypes: {
      children: PropTypes.node,
      valid: PropTypes.bool.isRequired
    }
  };
});

var inlineStyle =
/*#__PURE__*/
styled.css(["display:inline-flex;margin-right:0.75rem;"]);
var FormCheck =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'form-check',
    omitProps: ['inline'],
    style: function style(p) {
      return styled.css(["display:flex;align-items:center;", ";"], p.inline && inlineStyle);
    },
    propTypes: {
      children: PropTypes.node,
      inline: PropTypes.bool
    }
  };
});

var FormCheckLabel =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'form-check-label',
    defaultComponent: 'label',
    style: function style(p) {
      return styled.css(["padding-left:0.25rem;[class*='disabled'] ~ &{color:", ";}"], inputDisabledText(p));
    },
    propTypes: {
      children: PropTypes.node
    }
  };
});

var FormGroup =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'form-group',
    style: function style() {
      return styled.css(["margin-bottom:1rem;"]);
    },
    propTypes: {
      children: PropTypes.node
    }
  };
});

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  ", "\n  html,\n  body {\n    font-family: ", ";\n    font-size: ", ";\n    line-height: ", ";\n    -webkit-font-smoothing: antialiased;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var Normalize =
/*#__PURE__*/
styled.createGlobalStyle(
/*#__PURE__*/
_templateObject(),
/*#__PURE__*/
polished.normalize(), fontFamily, fontSizeBase, lineHeightBase);

var styleBreakpoints = function styleBreakpoints(p) {
  var bk = breakpoints(p);
  var maxWidths = gridMaxWidths(p);

  var style = function style(breakpoint) {
    var width = bk[breakpoint];

    var media = function media(s) {
      var _ref;

      return width === 0 ? null : (_ref = {}, _ref[mediaMinWidth(width)] = s, _ref);
    };

    return media({
      maxWidth: maxWidths[breakpoint]
    });
  };

  return Object.keys(bk).reduce(function (obj, breakpoint) {
    return Object.assign(obj, style(breakpoint));
  }, {});
};

var Grid =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'grid',
    omitProps: ['gutter', 'fluid'],
    style: function style(p) {
      var _p$gutter = p.gutter,
          gutter = _p$gutter === void 0 ? gridGutter(p) : _p$gutter;
      return styled.css(["width:100%;margin-left:auto;margin-right:auto;", ";", ";", ";"], system$2.pr({
        pr: gutter
      })(p), system$2.pl({
        pl: gutter
      })(p), p.fluid ? null : styleBreakpoints(p));
    },
    propTypes: {
      children: PropTypes.node,
      gutter: getSystemPropTypes(system$2.pr).pr,
      fluid: PropTypes.bool
    }
  };
});

var sizeStyle$1 = {
  sm: function sm(p) {
    return styled.css(["padding:", " ", ";font-size:", ";line-height:", ";border-radius:", ";"], inputPaddingYSm(p), inputPaddingXSm(p), fontSizeSm(p), inputLineHeightSm(p), borderRadiusSm(p));
  },
  md: function md(p) {
    return styled.css(["padding:", " ", ";font-size:", ";line-height:", ";border-radius:", ";"], inputPaddingY(p), inputPaddingX(p), fontSizeBase(p), inputLineHeight(p), borderRadius(p));
  },
  lg: function lg(p) {
    return styled.css(["padding:", " ", ";font-size:", ";line-height:", ";border-radius:", ";"], inputPaddingYLg(p), inputPaddingXLg(p), fontSizeLg(p), inputLineHeightLg(p), borderRadiusLg(p));
  }
};

var validStyle$1 = function validStyle(p) {
  var valid = p.valid;
  if (valid !== true && valid !== false) return null;
  var color = valid ? success(p) : danger(p);
  return styled.css(["border-color:", ";&:focus{border-color:", ";", "}"], color, color, controlFocus(color)(p));
};

var controlStyle$1 = function controlStyle(p) {
  return styled.css(["display:block;width:100%;&:focus{", "}", ";"], controlFocus(primary(p))(p), validStyle$1(p));
};

var Input =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'input',
    defaultComponent: 'input',
    omitProps: ['control', 'size', 'valid'],
    style: function style(p) {
      return styled.css(["display:inline-block;border-width:", ";border-color:", ";border-style:solid;line-height:", ";color:", ";", ";background-color:", ";&[type='number']{padding-right:6px;}&::placeholder{color:", ";}&:focus{", "}&:disabled{background-color:", ";color:", ";}", ";", ";"], inputBorderWidth(p), inputBorderColor(p), inputLineHeight(p), inputTextColor(p), transitionBase(p), inputBgColor(p), inputPlaceholderText(p), baseFocus(primary(p))(p), inputDisabledBgColor(p), inputDisabledText(p), p.size && sizeStyle$1[p.size] && sizeStyle$1[p.size](p), p.control && controlStyle$1(p));
    },
    propTypes: {
      control: PropTypes.bool,
      size: PropTypes.oneOf(['sm', 'md', 'lg']),
      valid: PropTypes.bool
    },
    defaultProps: {
      size: 'md'
    }
  };
});

/* eslint-disable jsx-a11y/label-has-for */
var Label =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'label',
    defaultComponent: 'label',
    style: function style() {
      return styled.css(["display:inline-block;margin-bottom:0.5rem;"]);
    },
    propTypes: {
      children: PropTypes.node
    }
  };
});

function useNode(type) {
  var _useState = React.useState(null),
      node = _useState[0],
      setNode = _useState[1];

  React.useEffect(function () {
    var node = document.createElement(type);
    document.body.appendChild(node);
    setNode(node);
    return function () {
      return document.body.removeChild(node);
    };
  }, [type]);
  return node;
}

function create$2() {
  function Portal(_ref) {
    var children = _ref.children,
        _ref$type = _ref.type,
        type = _ref$type === void 0 ? 'sui-portal' : _ref$type;
    var node = useNode(type);
    if (!node) return null;
    return reactDom.createPortal(children, node);
  }

  Portal.propTypes = {
    type: PropTypes.string,
    children: PropTypes.node
  };
  return Portal;
}

var Portal = /*#__PURE__*/
create$2();

var ModalContext = /*#__PURE__*/
React.createContext();

function createModalComponent() {
  var createAriaHider = function createAriaHider(dialogNode) {
    var originalValues = [];
    var rootNodes = [];
    Array.prototype.forEach.call(document.querySelectorAll('body > *'), function (node) {
      if (node === dialogNode.parentNode) {
        return;
      }

      var attr = node.getAttribute('aria-hidden');
      var alreadyHidden = attr !== null && attr !== 'false';

      if (alreadyHidden) {
        return;
      }

      originalValues.push(attr);
      rootNodes.push(node);
      node.setAttribute('aria-hidden', 'true');
    });
    return function () {
      rootNodes.forEach(function (node, index) {
        var originalValue = originalValues[index];

        if (originalValue === null) {
          node.removeAttribute('aria-hidden');
        } else {
          node.setAttribute('aria-hidden', originalValue);
        }
      });
    };
  };

  var cx = function cx() {
    for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {
      classNames[_key] = arguments[_key];
    }

    return classNames.filter(Boolean).join(' ');
  };

  var ModalComponent =
  /*#__PURE__*/
  function (_Component) {
    _inheritsLoose(ModalComponent, _Component);

    function ModalComponent() {
      var _this;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      _this = _Component.call.apply(_Component, [this].concat(args)) || this;
      _this.contentRef = React__default.createRef();
      _this.trap = null;
      _this.disposeAriaHider = null;

      _this.handleDialogRef = function (dialogNode) {
        if (dialogNode) {
          _this.disposeAriaHider = createAriaHider(dialogNode);
        } else {
          _this.disposeAriaHider();
        }
      };

      _this.onFocusLockActivation = function () {
        var initialFocusRef = _this.props.initialFocusRef;

        if (initialFocusRef && initialFocusRef.current) {
          initialFocusRef.current.focus();
        }
      };

      return _this;
    }

    var _proto = ModalComponent.prototype;

    _proto.render = function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          forwardedRef = _this$props.forwardedRef,
          as = _this$props.as,
          theme = _this$props.theme,
          opened = _this$props.opened,
          onClose = _this$props.onClose,
          children = _this$props.children,
          persistent = _this$props.persistent,
          onClick = _this$props.onClick,
          onKeyDown = _this$props.onKeyDown,
          initialFocusRef = _this$props.initialFocusRef,
          props = _objectWithoutPropertiesLoose(_this$props, ["className", "forwardedRef", "as", "theme", "opened", "onClose", "children", "persistent", "onClick", "onKeyDown", "initialFocusRef"]);

      var timeout = modalTransitionDuration({
        theme: theme || {}
      });
      return React__default.createElement(Transition, {
        timeout: timeout,
        "in": opened
      }, function (status) {
        if (status === 'exited') return null;
        return React__default.createElement(Portal, null, React__default.createElement(FocusLock, {
          returnFocus: true,
          onActivation: _this2.onFocusLockActivation
        }, React__default.createElement(reactRemoveScroll.RemoveScroll, {
          forwardProps: true
        }, React__default.createElement("div", _extends({
          className: cx('sui-modal', "sui-modal-transition-" + status, className),
          ref: _this2.handleDialogRef,
          onClick: wrapEvent(onClick, function (event) {
            event.stopPropagation();
            onClose();
          }),
          onKeyDown: wrapEvent(onKeyDown, function (event) {
            if (event.key === 'Escape') {
              event.stopPropagation();
              onClose();
            }
          })
        }, props), React__default.createElement(ModalContext.Provider, {
          value: {
            contentRef: _this2.contentRef,
            onClose: onClose
          }
        }, children)))));
      });
    };

    return ModalComponent;
  }(React.Component);

  var ModalComponentWithTheme = styled.withTheme(ModalComponent);
  return ModalComponentWithTheme;
}

var Modal =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'modal',
    InnerComponent: createModalComponent(),
    style: function style(p) {
      return styled.css(["position:fixed;top:0;right:0;bottom:0;left:0;z-index:", ";visibility:visible;overflow-x:hidden;overflow-y:auto;opacity:0;outline:0;background-color:", ";", ";&.sui-modal-transition-entering{opacity:0;}&.sui-modal-transition-entered{opacity:1;}&.sui-modal-transition-exiting{opacity:0;}"], zIndexModal(p), modalBackdropBg(p), transition("opacity " + modalTransitionDuration(p) + "ms ease-in-out")(p));
    },
    propTypes: {
      children: PropTypes.node,
      opened: PropTypes.bool,
      onClose: PropTypes.func,
      initialFocusRef: PropTypes.object
    },
    defaultProps: {
      persistent: true
    }
  };
});

var ModalBody =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'modal-body',
    style: function style(p) {
      return styled.css(["position:relative;flex:1 1 auto;padding:", ";"], modalInnerPadding(p));
    },
    propTypes: {
      children: PropTypes.node
    }
  };
});

var ModalContent =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'modal-content',
    render: function render(_ref) {
      var Component = _ref.Component,
          _ref2 = _ref.ref,
          onClick = _ref.onClick,
          props = _objectWithoutPropertiesLoose(_ref, ["Component", "ref", "onClick"]);

      return React__default.createElement(ModalContext.Consumer, null, function (modalContext) {
        return React__default.createElement(Component, _extends({
          tabIndex: "-1",
          ref: function ref(node) {
            if (modalContext) modalContext.contentRef.current = node;
            if (_ref2) _ref2(node);
          },
          onClick: wrapEvent(onClick, stopPropagation)
        }, props));
      });
    },
    style: function style(p) {
      return styled.css(["position:relative;display:flex;flex-direction:column;width:100%;pointer-events:auto;background-color:", ";background-clip:padding-box;border-style:solid;border-width:", ";border-color:", ";border-radius:", ";", ";outline:0;", ";"], modalContentBg(p), modalContentBorderWidth(p), modalContentBorderColor(p), modalContentBorderRadius(p), modalContentBoxShadowXs(p), up('sm', modalContentBoxShadowSmUp(p)));
    },
    propTypes: {
      children: PropTypes.node
    }
  };
});

var ModalCloseButton =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'modal-close-button',
    defaultComponent: 'button',
    render: function render(_ref) {
      var Component = _ref.Component,
          onClick = _ref.onClick,
          ref = _ref.ref,
          props = _objectWithoutPropertiesLoose(_ref, ["Component", "onClick", "ref"]);

      return React__default.createElement(ModalContext.Consumer, null, function (modalContext) {
        return React__default.createElement(Component, _extends({
          ref: ref,
          onClick: wrapEvent(onClick, function () {
            if (modalContext) {
              modalContext.onClose();
            }
          })
        }, props), React__default.createElement("span", {
          "aria-hidden": "true"
        }, "\xD7"));
      });
    },
    style: function style(p) {
      return styled.css(["position:absolute;cursor:pointer;top:0.2rem;right:0.2rem;padding:0.3rem 0.8rem;margin:0;background-color:transparent;appearance:none;border:0;font-size:1.5rem;font-weight:700;line-height:1;border-radius:", ";opacity:0.5;", ";&:focus{opacity:1;", ";}&:hover{opacity:1;}"], borderRadius(p), transitionBase(p), baseFocus(primary(p))(p));
    },
    propTypes: {
      children: PropTypes.node
    }
  };
});

var ModalDialog =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'modal-dialog',
    render: function render(_ref) {
      var Component = _ref.Component,
          props = _objectWithoutPropertiesLoose(_ref, ["Component"]);

      return React__default.createElement(Component, _extends({
        role: "dialog",
        "aria-modal": "true"
      }, props));
    },
    style: function style(p) {
      var margin = modalDialogMargin(p);
      var upSmMargin = modalDialogMarginYSmUp(p);
      return styled.css(["position:relative;width:auto;margin:", ";pointer-events:none;display:flex;align-items:center;min-height:calc(100% - ", ");", ";"], margin, calc(margin, function (x) {
        return x * 2;
      }), up('sm', styled.css(["max-width:500px;margin:", " auto;min-height:calc(100% - ", ");"], upSmMargin, calc(upSmMargin, function (x) {
        return x * 2;
      }))));
    },
    propTypes: {
      children: PropTypes.node
    }
  };
});

var ModalFooter =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'modal-footer',
    style: function style(p) {
      return styled.css(["display:flex;align-items:center;justify-content:flex-end;padding:", ";border-top-width:", ";border-top-style:solid;border-top-color:", ";>:not(:first-child){margin-left:0.25rem;}>:not(:last-child){margin-right:0.25rem;}"], modalInnerPadding(p), modalFooterBorderWidth(p), modalFooterBorderColor(p));
    },
    propTypes: {
      children: PropTypes.node
    }
  };
});

var ModalHeader =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'modal-header',
    style: function style(p) {
      return styled.css(["display:flex;align-items:flex-start;justify-content:space-between;padding:", ";border-bottom-style:solid;border-bottom-width:", ";border-bottom-color:", ";border-top-left-radius:", ";border-top-right-radius:", ";"], modalInnerPadding(p), modalHeaderBorderWidth(p), modalHeaderBorderColor(p), modalContentBorderRadius(p), modalContentBorderRadius(p));
    },
    propTypes: {
      children: PropTypes.node
    }
  };
});

function useRandomId(prefix) {
  return React.useMemo(function () {
    return "" + (prefix ? prefix + "-" : '') + Math.random().toString(36).substring(7);
  }, [prefix]);
}

function usePopper(containerRef, elementRef, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'auto' : _ref$placement;

  React.useEffect(function () {
    var container = containerRef.current;
    var element = elementRef.current;
    if (!container || !element) return undefined;
    var popper = new PopperJs(container, element, {
      placement: placement
    });
    return function () {
      return popper.destroy();
    };
  }, [containerRef, elementRef, placement]);
}
var placements = ['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'right', 'right-start', 'right-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end'];

function useSetAttribute(elementRef, attribute, value) {
  React.useEffect(function () {
    if (!elementRef.current) return;
    elementRef.current.setAttribute(attribute, value);
  }, [elementRef, attribute, value]);
}

function useAsyncRef(defaultValue, forwardedRef) {
  var _useState = React.useState({
    current: defaultValue
  }),
      ref = _useState[0],
      setRef = _useState[1];

  var handleRef = React.useCallback(function (current) {
    setRef({
      current: current
    });

    if (typeof forwardedRef === 'function') {
      forwardedRef(current);
    } else if (forwardedRef) {
      forwardedRef.current = current;
    }
  }, [setRef, forwardedRef]);
  return [ref, handleRef];
}

function useClickOutside(ref, handler) {
  var isTouchRef = React.useRef();
  var handlerRef = React.useRef();
  handlerRef.current = handler;
  var refs = React.useMemo(function () {
    return Array.isArray(ref) ? ref : ref;
  }, [ref]);
  React.useEffect(function () {
    function handleEvent(e) {
      if (e.type === 'touchend') {
        isTouchRef.current = true;
      }

      if (e.type === 'click' && isTouchRef.current) return;

      if (refs.every(function (_ref) {
        var el = _ref.current;
        return el && el !== e.target && !el.contains(e.target);
      })) {
        handlerRef.current(e);
      }
    }

    document.addEventListener('touchend', handleEvent, true);
    document.addEventListener('click', handleEvent, true);
    return function () {
      document.removeEventListener('touchend', handleEvent, true);
      document.removeEventListener('click', handleEvent, true);
    };
  }, [refs]);
}

var ParentElement =
/*#__PURE__*/
React.forwardRef(function (props, ref) {
  var _useState = React.useState(true),
      show = _useState[0],
      setShow = _useState[1];

  var divRef = React.useRef();
  React.useEffect(function () {
    ref.current = divRef.current.parentElement;
    setShow(false);
  }, [divRef, ref]);
  return show ? React__default.createElement("div", {
    ref: divRef
  }) : null;
});

function PopoverComponent(_ref) {
  var children = _ref.children,
      visible = _ref.visible,
      idProp = _ref.id,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'auto' : _ref$placement,
      ref = _ref.ref,
      Component = _ref.Component,
      _ref$hideOnClickOutsi = _ref.hideOnClickOutside,
      hideOnClickOutside = _ref$hideOnClickOutsi === void 0 ? true : _ref$hideOnClickOutsi,
      onHide = _ref.onHide,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "visible", "id", "placement", "ref", "Component", "hideOnClickOutside", "onHide"]);

  var parentRef = React.useRef();

  var _useAsyncRef = useAsyncRef(undefined, ref),
      popoverRef = _useAsyncRef[0],
      handlePopoverRef = _useAsyncRef[1];

  var randomId = useRandomId('tooltip');
  var id = idProp || randomId;
  usePopper(parentRef, popoverRef, {
    placement: placement
  });
  useSetAttribute(parentRef, 'aria-haspopup', true);
  useSetAttribute(parentRef, 'aria-expanded', visible);
  useSetAttribute(parentRef, 'aria-controls', id);
  useClickOutside([parentRef, popoverRef], function () {
    if (onHide && hideOnClickOutside) onHide();
  });
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(ParentElement, {
    ref: parentRef
  }), React__default.createElement(Portal, null, React__default.createElement(Component, _extends({
    ref: handlePopoverRef,
    id: id,
    "aria-hidden": !visible,
    role: "group"
  }, props), children)));
}

var Popover =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'popover',
    render: PopoverComponent,
    defaultComponent: 'div',
    style: function style() {
      return styled.css(["&[aria-hidden='true']{pointer-events:none;visibility:hidden !important;}"]);
    },
    propTypes: {
      children: PropTypes.node,
      onHide: PropTypes.func,
      placement: PropTypes.oneOf(placements),
      visible: PropTypes.bool
    }
  };
});

var sizeStyle$2 = {
  sm:
  /*#__PURE__*/
  styled.css([".sui-radio-content{width:0.875rem;height:0.875rem;}.sui-radio-circle{width:8px;height:8px;}"]),
  md:
  /*#__PURE__*/
  styled.css([".sui-radio-content{width:1rem;height:1rem;}.sui-radio-circle{width:10px;height:10px;}"]),
  lg:
  /*#__PURE__*/
  styled.css([".sui-radio-content{width:1.25rem;height:1.25rem;}.sui-radio-circle{width:14px;height:14px;}"])
};

var validStyle$2 = function validStyle(p) {
  var valid = p.valid;
  if (valid !== true && valid !== false) return null;
  var color = valid ? success(p) : danger(p);
  return styled.css(["input + .sui-radio-content,input:checked + .sui-radio-content{border-color:", ";}input:checked + .sui-radio-content .sui-radio-circle{background-color:", ";}input:focus + .sui-radio-content{border-color:", ";", "}"], color, color, color, controlFocus(color)(p));
};

var controlStyle$2 = function controlStyle(p) {
  return styled.css(["input:focus + .sui-radio-content{", "}", ";"], controlFocus(primary(p))(p), validStyle$2(p));
};

var containerSystem$1 =
/*#__PURE__*/
system$2.compose(system$2.basics, system$2.dimensions, system$2.space, system$2.flexboxes, system$2.positions);
var contentSystem$1 =
/*#__PURE__*/
system$2.compose(system$2.dimensions, system$2.backgrounds, system$2.borders);
var system$1 =
/*#__PURE__*/
system$2.compose(containerSystem$1, contentSystem$1);
var Radio =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'radio',
    system: system$1,
    applySystem: null,
    render: function render(_ref) {
      var Component = _ref.Component,
          ref = _ref.ref,
          className = _ref.className,
          size = _ref.size,
          control = _ref.control,
          valid = _ref.valid,
          props = _objectWithoutPropertiesLoose(_ref, ["Component", "ref", "className", "size", "control", "valid"]);

      return React__default.createElement(SwitchState, props, function (_ref2) {
        var input = _ref2.input;
        return React__default.createElement(Component, {
          className: className
        }, React__default.createElement("input", _extends({
          ref: ref,
          type: "radio"
        }, input)), React__default.createElement("div", {
          className: "sui-radio-content"
        }, React__default.createElement("div", {
          className: "sui-radio-circle"
        })));
      });
    },
    style: function style(p) {
      return styled.css(["display:inline-flex;align-items:center;justify-content:center;position:relative;width:1.5rem;height:1.5rem;position:relative;.sui-radio-content{display:flex;flex-shrink:0;align-items:center;justify-content:center;border-radius:50%;background-color:", ";border-width:", ";border-style:solid;border-color:", ";", ";}input:checked + .sui-radio-content{border-color:", ";.sui-radio-circle{transform:scale(1);}}input:focus + .sui-radio-content{", ";}input:disabled + .sui-radio-content{background-color:", ";}.sui-radio-circle{", ";border-radius:50%;background-color:", ";transform:scale(0);}", ";", ";.sui-radio-content{", ";}", ";"], inputBgColor(p), inputBorderWidth(p), inputBorderColor(p), transitionBase(p), primary(p), baseFocus(primary(p))(p), inputDisabledBgColor(p), transitionBase(p), primary(p), p.size && sizeStyle$2[p.size], containerSystem$1.props, contentSystem$1.props, p.control && controlStyle$2(p));
    },
    propTypes: {
      control: PropTypes.bool,
      checked: PropTypes.bool,
      disabled: PropTypes.bool,
      onChange: PropTypes.func,
      size: PropTypes.oneOf(['sm', 'md', 'lg']),
      valid: PropTypes.bool,
      value: PropTypes.string
    },
    defaultProps: {
      size: 'md'
    }
  };
});

function create$3() {
  var RadioGroup =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(RadioGroup, _React$Component);

    function RadioGroup() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.controls = [];
      return _this;
    }

    var _proto = RadioGroup.prototype;

    _proto.getChildContext = function getChildContext() {
      return {
        suiGroup: this
      };
    };

    _proto.register = function register(control) {
      this.controls.push(control);
    };

    _proto.unregister = function unregister(control) {
      var index = this.controls.indexOf(control);
      if (index !== -1) this.controls.splice(index, 1);
    };

    _proto.notify = function notify(event) {
      this.controls.forEach(function (control) {
        if (control.props.checked === undefined && control.props.name === event.target.name && control.props.value !== event.target.value) {
          control.updateState({
            checked: false
          });
        }
      });
    };

    _proto.render = function render() {
      return this.props.children;
    };

    return RadioGroup;
  }(React__default.Component);

  RadioGroup.propTypes = {
    children: PropTypes.node
  };
  RadioGroup.childContextTypes = {
    suiGroup: PropTypes.object
  };
  return RadioGroup;
}

var RadioGroup = /*#__PURE__*/
create$3();

var Row =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'row',
    omitProps: ['gutter'],
    style: function style(p) {
      var _p$gutter = p.gutter,
          gutter = _p$gutter === void 0 ? gridGutter(p) : _p$gutter;
      var negativeGutter = negative(gutter);
      return styled.css(["box-sizing:border-box;flex-grow:1;flex-wrap:wrap;display:flex;", " ", ""], system$2.ml({
        ml: negativeGutter
      })(p), system$2.mr({
        mr: negativeGutter
      })(p));
    },
    propTypes: {
      children: PropTypes.node,
      gutter: getSystemPropTypes(system$2.ml).ml
    }
  };
});

var sizeStyle$3 = {
  sm: function sm(p) {
    return styled.css(["select{padding:", " ", ";font-size:", ";line-height:", ";border-radius:", ";", ";}.sui-select-arrow{right:0.35rem;width:0.525rem;}"], inputPaddingYSm(p), inputPaddingXSm(p), fontSizeSm(p), inputLineHeightSm(p), borderRadiusSm(p), p.arrow && !p.multiple && 'padding-right: 1.225rem;');
  },
  md: function md(p) {
    return styled.css(["select{padding:", " ", ";font-size:", ";line-height:", ";", ";border-radius:", ";}.sui-select-arrow{right:0.5rem;width:0.6rem;}"], inputPaddingY(p), inputPaddingX(p), fontSizeBase(p), inputLineHeight(p), p.arrow && !p.multiple && 'padding-right: 1.6rem;', borderRadius(p));
  },
  lg: function lg(p) {
    return styled.css(["select{padding:", " ", ";font-size:", ";line-height:", ";border-radius:", ";", ";}.sui-select-arrow{right:0.625rem;width:0.75rem;}"], inputPaddingYLg(p), inputPaddingXLg(p), fontSizeLg(p), inputLineHeightLg(p), borderRadiusLg(p), p.arrow && !p.multiple && 'padding-right: 2rem;');
  }
};

var validStyle$3 = function validStyle(p) {
  var valid = p.valid;
  if (valid !== true && valid !== false) return null;
  var color = valid ? success(p) : danger(p);
  return styled.css(["select{border-color:", ";&:focus{border-color:", ";", "}}"], color, color, controlFocus(color)(p));
};

var controlStyle$3 = function controlStyle(p) {
  return styled.css(["&,select{display:block;width:100%;}select:focus{", ";}", ";"], controlFocus(primary(p))(p), validStyle$3(p));
};

var Arrow = function Arrow() {
  return React__default.createElement("svg", {
    className: "sui-select-arrow",
    viewBox: "0 0 10 5"
  }, React__default.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, React__default.createElement("path", {
    d: "M17 14H-7v-24h24"
  }), React__default.createElement("path", {
    fill: "currentColor",
    opacity: 0.5,
    d: "M0 0l5 5 5-5"
  })));
};

var Select =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'select',
    render: function render(_ref) {
      var Component = _ref.Component,
          arrow = _ref.arrow,
          control = _ref.control,
          className = _ref.className,
          size = _ref.size,
          valid = _ref.valid,
          children = _ref.children,
          props = _objectWithoutPropertiesLoose(_ref, ["Component", "arrow", "control", "className", "size", "valid", "children"]);

      return React__default.createElement(Component, {
        className: className
      }, arrow && !props.multiple ? React__default.createElement(Arrow, null) : null, React__default.createElement("select", props, children));
    },
    style: function style(p) {
      return styled.css(["display:inline-block;position:relative;select{appearance:none;-webkit-appearance:none;-moz-appearance:none;-webkit-border-radius:0;display:inline-block;border-width:", ";border-color:", ";border-style:solid;line-height:", ";", ";color:", ";&:focus{", ";}&:disabled{background-color:", ";color:", ";}}.sui-select-arrow{position:absolute;top:50%;pointer-events:none;}", ";", ";"], inputBorderWidth(p), inputBorderColor(p), inputLineHeight(p), transitionBase(p), inputTextColor(p), baseFocus(primary(p))(p), inputDisabledBgColor(p), inputDisabledText(p), p.size && sizeStyle$3[p.size] && sizeStyle$3[p.size](p), p.control && controlStyle$3(p));
    },
    propTypes: {
      arrow: PropTypes.bool,
      control: PropTypes.bool,
      options: PropTypes.array,
      size: PropTypes.oneOf(['sm', 'md', 'lg']),
      valid: PropTypes.bool,
      children: PropTypes.node
    },
    defaultProps: {
      arrow: true,
      size: 'md'
    }
  };
});

var Switch =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'switch',
    system: system$2.system,
    applySystem: null,
    render: function render(_ref) {
      var Component = _ref.Component,
          ref = _ref.ref,
          className = _ref.className,
          _ref$onLabel = _ref.onLabel,
          onLabel = _ref$onLabel === void 0 ? 'ON' : _ref$onLabel,
          _ref$offLabel = _ref.offLabel,
          offLabel = _ref$offLabel === void 0 ? 'OFF' : _ref$offLabel,
          labeled = _ref.labeled,
          props = _objectWithoutPropertiesLoose(_ref, ["Component", "ref", "className", "onLabel", "offLabel", "labeled"]);

      return React__default.createElement(SwitchState, props, function (_ref2) {
        var input = _ref2.input;
        return React__default.createElement(Component, {
          className: className
        }, React__default.createElement("input", _extends({
          ref: ref,
          type: "checkbox"
        }, input)), React__default.createElement("div", {
          className: "sui-switch-wrapper"
        }, React__default.createElement("div", {
          className: "sui-switch-content"
        }, React__default.createElement("span", {
          className: "sui-switch-label sui-switch-label-on"
        }, labeled ? onLabel : ''), React__default.createElement("div", {
          className: "sui-switch-ball"
        }), React__default.createElement("span", {
          className: "sui-switch-label sui-switch-label-off"
        }, labeled ? offLabel : ''))));
      });
    },
    style: function style(p) {
      return styled.css(["display:inline-block;position:relative;width:50px;height:24px;.sui-switch-wrapper{width:50px;height:24px;border-radius:34px;background-color:", ";overflow:hidden;cursor:pointer;border-width:", ";border-color:", ";border-style:solid;font-size:9px;font-weight:800;", ";}input:focused + .sui-switch-wrapper{", ";}input:checked + .sui-switch-wrapper{background-color:", ";border-color:transparent;.sui-switch-content{transform:translateX(0);}.sui-switch-ball{background-color:", ";}}input:disabled + .sui-switch-wrapper{opacity:0.5;}.sui-switch-ball{flex-shrink:0;background-color:", ";border-radius:50%;width:18px;height:18px;", ";}.sui-switch-content{display:flex;align-items:center;height:22px;transform:translateX(-25px);", ";}.sui-switch-label{flex-shrink:0;width:27px;text-align:center;user-select:none;&.sui-switch-label-on{color:", ";}&.sui-switch-label-off{color:", ";}}.sui-switch-wrapper{", ";}"], gray300(p), inputBorderWidth(p), inputBorderColor(p), transitionBase(p), baseFocus(primary(p))(p), primaryLight(p), primary(p), gray500(p), transitionBase(p), transitionBase(p), primary(p), gray900(p), system$2.system.props);
    },
    propTypes: {
      checked: PropTypes.bool,
      disabled: PropTypes.bool,
      labeled: PropTypes.bool,
      onLabel: PropTypes.string,
      offLabel: PropTypes.string,
      onChange: PropTypes.func
    }
  };
});

function createTextarea() {
  var Textarea = Input.withComponent('textarea');
  Textarea.propTypes = Input.propTypes;
  return Textarea;
}

var Textarea = /*#__PURE__*/
createTextarea();

function useToggle(defaultToggled, onToggle) {
  if (defaultToggled === void 0) {
    defaultToggled = false;
  }

  var onToggleRef = React.useRef();
  onToggleRef.current = onToggle;

  var _useState = React.useState(defaultToggled),
      toggled = _useState[0],
      setToggled = _useState[1];

  var toggle = React.useCallback(function (toggled) {
    return setToggled(toggled === undefined ? function (previousToggled) {
      return !previousToggled;
    } : toggled);
  }, [setToggled]);
  React.useEffect(function () {
    if (onToggleRef.current) {
      onToggleRef.current(toggled);
    }
  }, [onToggleRef, toggled]);
  return [toggled, toggle];
}

function create$4() {
  function Toggler(_ref) {
    var children = _ref.children,
        defaultToggled = _ref.defaultToggled,
        onToggleProp = _ref.onToggle;
    return children(useToggle(defaultToggled, onToggleProp));
  }

  Toggler.propTypes = {
    children: PropTypes.func.isRequired,
    defaultToggled: PropTypes.bool,
    onToggle: PropTypes.func
  };
  return Toggler;
}

var Toggler = /*#__PURE__*/
create$4();

function useEventListener(targetRef, event, listener) {
  var listenerRef = React.useRef();
  listenerRef.current = listener;
  React.useEffect(function () {
    if (!targetRef.current) return undefined;
    var target = targetRef.current;

    function handleEvent(event) {
      return listenerRef.current(event);
    }

    target.addEventListener(event, handleEvent);
    return function () {
      return target.removeEventListener(event, handleEvent);
    };
  }, [event, targetRef, listenerRef]);
}

function TooltipComponent(_ref) {
  var children = _ref.children,
      idProp = _ref.id,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'top' : _ref$placement,
      ref = _ref.ref,
      Component = _ref.Component,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "id", "placement", "ref", "Component"]);

  var parentRef = React.useRef();

  var _useState = React.useState(false),
      visible = _useState[0],
      setVisible = _useState[1];

  var _useAsyncRef = useAsyncRef(undefined, ref),
      tooltipRef = _useAsyncRef[0],
      handleTooltipRef = _useAsyncRef[1];

  var randomId = useRandomId('tooltip');
  var id = idProp || randomId;

  var makeVisible = function makeVisible() {
    return setVisible(true);
  };

  var makeHidden = function makeHidden() {
    return setVisible(false);
  };

  usePopper(parentRef, tooltipRef, {
    placement: placement
  });
  useSetAttribute(parentRef, 'aria-describedby', id);
  useEventListener(parentRef, 'focus', makeVisible);
  useEventListener(parentRef, 'blur', makeHidden);
  useEventListener(parentRef, 'mouseover', makeVisible);
  useEventListener(parentRef, 'mouseout', makeHidden);
  return React__default.createElement(React__default.Fragment, null, React__default.createElement(ParentElement, {
    ref: parentRef
  }), React__default.createElement(Portal, null, React__default.createElement(Component, _extends({
    ref: handleTooltipRef,
    id: id,
    "aria-hidden": !visible,
    role: "tooltip"
  }, props), children)));
}

var Tooltip =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'tooltip',
    defaultComponent: 'div',
    render: TooltipComponent,
    style: function style(p) {
      return styled.css(["&[aria-hidden='true']{pointer-events:none;visibility:hidden !important;}margin:0.5em;font-size:0.875em;text-align:center;padding:0.5em 0.75em;color:", ";background-color:", ";border-radius:", ";"], white(p), black(p), borderRadius(p));
    },
    propTypes: {
      children: PropTypes.node,
      placement: PropTypes.oneOf(placements)
    }
  };
});

var variantTags = {
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  'display-1': 'h1',
  'display-2': 'h2',
  'display-3': 'h3',
  'display-4': 'h4'
};

var commonHeadingStyle = function commonHeadingStyle(p) {
  var fontFamily = headingsFontFamily(p);
  return styled.css(["margin-top:0;margin-bottom:", ";font-weight:", ";line-height:", ";color:", ";", ";"], headingsMarginBottom(p), headingsFontWeight(p), headingsLineHeight(p), headingsColor(p), fontFamily && "font-family: " + fontFamily);
};

var variantStyle = {
  h1: function h1(p) {
    return styled.css(["", ";font-size:", ";"], commonHeadingStyle(p), h1FontSize(p));
  },
  h2: function h2(p) {
    return styled.css(["", ";font-size:", ";"], commonHeadingStyle(p), h2FontSize(p));
  },
  h3: function h3(p) {
    return styled.css(["", ";font-size:", ";"], commonHeadingStyle(p), h3FontSize(p));
  },
  h4: function h4(p) {
    return styled.css(["", ";font-size:", ";"], commonHeadingStyle(p), h4FontSize(p));
  },
  h5: function h5(p) {
    return styled.css(["", ";font-size:", ";"], commonHeadingStyle(p), h5FontSize(p));
  },
  h6: function h6(p) {
    return styled.css(["", ";font-size:", ";"], commonHeadingStyle(p), h6FontSize(p));
  },
  'display-1': function display1(p) {
    return styled.css(["", ";font-size:", ";font-weight:", ";line-height:", ";"], commonHeadingStyle(p), display1Size(p), display1Weight(p), displayLineHeight(p));
  },
  'display-2': function display2(p) {
    return styled.css(["", ";font-size:", ";font-weight:", ";line-height:", ";"], commonHeadingStyle(p), display2Size(p), display2Weight(p), displayLineHeight(p));
  },
  'display-3': function display3(p) {
    return styled.css(["", ";font-size:", ";font-weight:", ";line-height:", ";"], commonHeadingStyle(p), display3Size(p), display3Weight(p), displayLineHeight(p));
  },
  'display-4': function display4(p) {
    return styled.css(["", ";font-size:", ";font-weight:", ";line-height:", ";"], commonHeadingStyle(p), display4Size(p), display4Weight(p), displayLineHeight(p));
  }
};
var Typography =
/*#__PURE__*/
createComponent(function () {
  return {
    name: 'typo',
    defaultComponent: null,
    render: function render(_ref) {
      var className = _ref.className,
          BaseComponent = _ref.Component,
          variant = _ref.variant,
          props = _objectWithoutPropertiesLoose(_ref, ["className", "Component", "variant"]);

      var Component = BaseComponent || variantTags[variant] || 'span';
      return React__default.createElement(Component, _extends({
        className: className
      }, props));
    },
    style: function style(p) {
      return styled.css(["", ";"], p.variant && variantStyle[p.variant] && variantStyle[p.variant](p));
    },
    propTypes: {
      children: PropTypes.node,
      variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'display-1', 'display-2', 'display-3', 'display-4'])
    }
  };
});

var theme = /*#__PURE__*/
definitionsToTheme(theming);

Object.keys(styled).forEach(function (key) {
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return styled[key];
    }
  });
});
exports.styled = styled__default;
exports.system = system$2__default;
exports.Transition = Transition;
exports.Alert = Alert;
exports.Box = Box;
exports.Breakpoint = Breakpoint;
exports.Button = Button;
exports.Checkbox = Checkbox;
exports.Col = Col;
exports.ControlFeedback = ControlFeedback;
exports.FormCheck = FormCheck;
exports.FormCheckLabel = FormCheckLabel;
exports.FormGroup = FormGroup;
exports.Grid = Grid;
exports.Input = Input;
exports.Label = Label;
exports.Modal = Modal;
exports.ModalBody = ModalBody;
exports.ModalCloseButton = ModalCloseButton;
exports.ModalContent = ModalContent;
exports.ModalContext = ModalContext;
exports.ModalDialog = ModalDialog;
exports.ModalFooter = ModalFooter;
exports.ModalHeader = ModalHeader;
exports.Normalize = Normalize;
exports.Popover = Popover;
exports.Portal = Portal;
exports.Radio = Radio;
exports.RadioGroup = RadioGroup;
exports.Row = Row;
exports.Select = Select;
exports.Switch = Switch;
exports.SwitchState = SwitchState;
exports.Textarea = Textarea;
exports.Toggler = Toggler;
exports.Tooltip = Tooltip;
exports.Typography = Typography;
exports.alertBgLevel = alertBgLevel;
exports.alertBorderLevel = alertBorderLevel;
exports.alertColorLevel = alertColorLevel;
exports.alertMarginBottom = alertMarginBottom;
exports.alertPaddingX = alertPaddingX;
exports.alertPaddingY = alertPaddingY;
exports.alertVariant = alertVariant;
exports.baseFocus = baseFocus;
exports.between = between;
exports.black = black;
exports.blue = blue;
exports.borderRadius = borderRadius;
exports.borderRadiusLg = borderRadiusLg;
exports.borderRadiusSm = borderRadiusSm;
exports.borderWidth = borderWidth;
exports.breakpoints = breakpoints;
exports.brick = brick;
exports.btnBorderWidth = btnBorderWidth;
exports.btnDisabledOpacity = btnDisabledOpacity;
exports.btnLineHeight = btnLineHeight;
exports.btnLineHeightLg = btnLineHeightLg;
exports.btnLineHeightSm = btnLineHeightSm;
exports.btnPaddingX = btnPaddingX;
exports.btnPaddingXLg = btnPaddingXLg;
exports.btnPaddingXSm = btnPaddingXSm;
exports.btnPaddingY = btnPaddingY;
exports.btnPaddingYLg = btnPaddingYLg;
exports.btnPaddingYSm = btnPaddingYSm;
exports.btnVariant = btnVariant;
exports.calc = calc;
exports.cascade = cascade;
exports.colorInterval = colorInterval;
exports.colorLevel = colorLevel;
exports.colorVariant = colorVariant;
exports.colorVariants = colorVariants;
exports.colorYik = colorYik;
exports.colors = colors;
exports.controlFocus = controlFocus;
exports.cyan = cyan;
exports.danger = danger;
exports.dark = dark;
exports.definitionsToTheme = definitionsToTheme;
exports.display1Size = display1Size;
exports.display1Weight = display1Weight;
exports.display2Size = display2Size;
exports.display2Weight = display2Weight;
exports.display3Size = display3Size;
exports.display3Weight = display3Weight;
exports.display4Size = display4Size;
exports.display4Weight = display4Weight;
exports.displayLineHeight = displayLineHeight;
exports.down = down;
exports.fontFamily = fontFamily;
exports.fontSizeBase = fontSizeBase;
exports.fontSizeLg = fontSizeLg;
exports.fontSizeSm = fontSizeSm;
exports.fontSizes = fontSizes;
exports.fontWeightBold = fontWeightBold;
exports.fontWeightLight = fontWeightLight;
exports.fontWeightNormal = fontWeightNormal;
exports.func = func;
exports.get = get;
exports.getTheme = getTheme;
exports.gray100 = gray100;
exports.gray200 = gray200;
exports.gray300 = gray300;
exports.gray400 = gray400;
exports.gray500 = gray500;
exports.gray600 = gray600;
exports.gray700 = gray700;
exports.gray800 = gray800;
exports.gray900 = gray900;
exports.green = green;
exports.gridColumns = gridColumns;
exports.gridGutter = gridGutter;
exports.gridMaxWidths = gridMaxWidths;
exports.h1FontSize = h1FontSize;
exports.h2FontSize = h2FontSize;
exports.h3FontSize = h3FontSize;
exports.h4FontSize = h4FontSize;
exports.h5FontSize = h5FontSize;
exports.h6FontSize = h6FontSize;
exports.headingsColor = headingsColor;
exports.headingsFontFamily = headingsFontFamily;
exports.headingsFontWeight = headingsFontWeight;
exports.headingsLineHeight = headingsLineHeight;
exports.headingsMarginBottom = headingsMarginBottom;
exports.indigo = indigo;
exports.info = info;
exports.inputBgColor = inputBgColor;
exports.inputBorderColor = inputBorderColor;
exports.inputBorderWidth = inputBorderWidth;
exports.inputBtnLineHeight = inputBtnLineHeight;
exports.inputBtnLineHeightLg = inputBtnLineHeightLg;
exports.inputBtnLineHeightSm = inputBtnLineHeightSm;
exports.inputBtnPaddingX = inputBtnPaddingX;
exports.inputBtnPaddingXLg = inputBtnPaddingXLg;
exports.inputBtnPaddingXSm = inputBtnPaddingXSm;
exports.inputBtnPaddingY = inputBtnPaddingY;
exports.inputBtnPaddingYLg = inputBtnPaddingYLg;
exports.inputBtnPaddingYSm = inputBtnPaddingYSm;
exports.inputDisabledBgColor = inputDisabledBgColor;
exports.inputDisabledText = inputDisabledText;
exports.inputLineHeight = inputLineHeight;
exports.inputLineHeightLg = inputLineHeightLg;
exports.inputLineHeightSm = inputLineHeightSm;
exports.inputPaddingX = inputPaddingX;
exports.inputPaddingXLg = inputPaddingXLg;
exports.inputPaddingXSm = inputPaddingXSm;
exports.inputPaddingY = inputPaddingY;
exports.inputPaddingYLg = inputPaddingYLg;
exports.inputPaddingYSm = inputPaddingYSm;
exports.inputPlaceholderText = inputPlaceholderText;
exports.inputTextColor = inputTextColor;
exports.is = is;
exports.light = light;
exports.lineHeightBase = lineHeightBase;
exports.lineHeightLg = lineHeightLg;
exports.lineHeightSm = lineHeightSm;
exports.mediaBetweenWidth = mediaBetweenWidth;
exports.mediaMaxWidth = mediaMaxWidth;
exports.mediaMinWidth = mediaMinWidth;
exports.mixin = mixin;
exports.modalBackdropBg = modalBackdropBg;
exports.modalContentBg = modalContentBg;
exports.modalContentBorderColor = modalContentBorderColor;
exports.modalContentBorderRadius = modalContentBorderRadius;
exports.modalContentBorderWidth = modalContentBorderWidth;
exports.modalContentBoxShadowSmUp = modalContentBoxShadowSmUp;
exports.modalContentBoxShadowXs = modalContentBoxShadowXs;
exports.modalDialogMargin = modalDialogMargin;
exports.modalDialogMarginYSmUp = modalDialogMarginYSmUp;
exports.modalFooterBorderColor = modalFooterBorderColor;
exports.modalFooterBorderWidth = modalFooterBorderWidth;
exports.modalHeaderBorderColor = modalHeaderBorderColor;
exports.modalHeaderBorderWidth = modalHeaderBorderWidth;
exports.modalInnerPadding = modalInnerPadding;
exports.modalTransitionDuration = modalTransitionDuration;
exports.negative = negative;
exports.num = num;
exports.omit = omit;
exports.orange = orange;
exports.pink = pink;
exports.primary = primary;
exports.primaryLight = primaryLight;
exports.purple = purple;
exports.px = px;
exports.red = red;
exports.secondary = secondary;
exports.secondaryLight = secondaryLight;
exports.spaces = spaces;
exports.stopPropagation = stopPropagation;
exports.string = string;
exports.success = success;
exports.teal = teal;
exports.th = th;
exports.thd = thd;
exports.theme = theme;
exports.transition = transition;
exports.transitionBase = transitionBase;
exports.transitionDuration = transitionDuration;
exports.transitionEasingFunc = transitionEasingFunc;
exports.transitionEnabled = transitionEnabled;
exports.unit = unit;
exports.up = up;
exports.useAsyncRef = useAsyncRef;
exports.useClickOutside = useClickOutside;
exports.useEventListener = useEventListener;
exports.useNode = useNode;
exports.usePopper = usePopper;
exports.useRandomId = useRandomId;
exports.useSetAttribute = useSetAttribute;
exports.useToggle = useToggle;
exports.warning = warning;
exports.white = white;
exports.wrapEvent = wrapEvent;
exports.yellow = yellow;
exports.yikTextDark = yikTextDark;
exports.yikTextLight = yikTextLight;
exports.yiqContrastedThreshold = yiqContrastedThreshold;
exports.zIndexControl = zIndexControl;
exports.zIndexInnerSwitch = zIndexInnerSwitch;
exports.zIndexModal = zIndexModal;
exports.zIndexModalBackdrop = zIndexModalBackdrop;
